extends /_templates/layout.pug
include /_templates/mixins.pug
block content
    section.addProType
        .titleSmall= self.label.addPro.mainInfoTitle1
        .titleLarge= self.label.addPro.mainInfoTitle2
        .addProDescription= self.label.addPro.mainInfoDescription1
        .addProDescription= self.label.addPro.mainInfoDescription2

        strong
            label= self.label.addPro.chooseProfileTypeLabel
        select(name='addProType', onchange='showSection(this.value)')
            option(value="" selected="" disabled)= self.label.addPro.chooseProfileTypeSelectValue
            - var profileTypes = {organisationprofile: self.label.addPro.typeOrganisation, userprofile: self.label.addPro.typeActor}
            each label, key in profileTypes
                option(value=key)= label
        span.result

    section.organisationprofile.addProSection
        form.form(autocomplete="off")
            //- Name
            fieldset.opened
                legend= self.label.addPro.nameTitle
                .fieldset_grid
                    .form_group
                        label(for='org_name_en')= self.label.addPro.nameDescription
                            span.required= ' ' + self.label.addPro.required
                        input#org_name_en( type='text' name='org_name_en' required maxlength="200" oninput="validateField(event.currentTarget)" data-validate="required")
                        .error

            //- Role at films
            fieldset.opened
                legend= self.label.addPro.roleTitle
                .fieldset_grid.one_column
                    .form_group.org_role_at_films
                        label(for='org_role_at_films')= self.label.addPro.roleDescription
                            span.required= ' ' + self.label.addPro.required
                        .sub_form(draggable="true")
                            span.nr= "1."
                            span.drag_me
                                <svg width="18" height="37" viewBox="0 0 18 37" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M5.18182 11.4444C5.76047 11.4444 6.31543 11.2103 6.7246 10.7936C7.13377 10.3768 7.36364 9.81159 7.36364 9.22222C7.36364 8.63285 7.13377 8.06762 6.7246 7.65087C6.31543 7.23413 5.76047 7 5.18182 7C4.60316 7 4.04821 7.23413 3.63904 7.65087C3.22987 8.06762 3 8.63285 3 9.22222C3 9.81159 3.22987 10.3768 3.63904 10.7936C4.04821 11.2103 4.60316 11.4444 5.18182 11.4444ZM5.18182 19.2222C5.76047 19.2222 6.31543 18.9881 6.7246 18.5713C7.13377 18.1546 7.36364 17.5894 7.36364 17C7.36364 16.4106 7.13377 15.8454 6.7246 15.4287C6.31543 15.0119 5.76047 14.7778 5.18182 14.7778C4.60316 14.7778 4.04821 15.0119 3.63904 15.4287C3.22987 15.8454 3 16.4106 3 17C3 17.5894 3.22987 18.1546 3.63904 18.5713C4.04821 18.9881 4.60316 19.2222 5.18182 19.2222ZM7.36364 24.7778C7.36364 25.3671 7.13377 25.9324 6.7246 26.3491C6.31543 26.7659 5.76047 27 5.18182 27C4.60316 27 4.04821 26.7659 3.63904 26.3491C3.22987 25.9324 3 25.3671 3 24.7778C3 24.1884 3.22987 23.6232 3.63904 23.2064C4.04821 22.7897 4.60316 22.5556 5.18182 22.5556C5.76047 22.5556 6.31543 22.7897 6.7246 23.2064C7.13377 23.6232 7.36364 24.1884 7.36364 24.7778ZM12.8182 11.4444C13.3968 11.4444 13.9518 11.2103 14.361 10.7936C14.7701 10.3768 15 9.81159 15 9.22222C15 8.63285 14.7701 8.06762 14.361 7.65087C13.9518 7.23413 13.3968 7 12.8182 7C12.2395 7 11.6846 7.23413 11.2754 7.65087C10.8662 8.06762 10.6364 8.63285 10.6364 9.22222C10.6364 9.81159 10.8662 10.3768 11.2754 10.7936C11.6846 11.2103 12.2395 11.4444 12.8182 11.4444ZM15 17C15 17.5894 14.7701 18.1546 14.361 18.5713C13.9518 18.9881 13.3968 19.2222 12.8182 19.2222C12.2395 19.2222 11.6846 18.9881 11.2754 18.5713C10.8662 18.1546 10.6364 17.5894 10.6364 17C10.6364 16.4106 10.8662 15.8454 11.2754 15.4287C11.6846 15.0119 12.2395 14.7778 12.8182 14.7778C13.3968 14.7778 13.9518 15.0119 14.361 15.4287C14.7701 15.8454 15 16.4106 15 17ZM12.8182 27C13.3968 27 13.9518 26.7659 14.361 26.3491C14.7701 25.9324 15 25.3671 15 24.7778C15 24.1884 14.7701 23.6232 14.361 23.2064C13.9518 22.7897 13.3968 22.5556 12.8182 22.5556C12.2395 22.5556 11.6846 22.7897 11.2754 23.2064C10.8662 23.6232 10.6364 24.1884 10.6364 24.7778C10.6364 25.3671 10.8662 25.9324 11.2754 26.3491C11.6846 26.7659 12.2395 27 12.8182 27Z" fill="#636769"/>
                                </svg>
                            select(name='org_role_at_films' oninput="validateField(event.currentTarget)" data-validate="at-least-one-option-selected")
                                option.default_select(class='invalid' value="" selected="")
                                each roleatfilm in self.data.roleatfilms.sort((a, b) => a.en - b.en)
                                    option(value=roleatfilm.id)= roleatfilm.roleName[self.locale]
                            button.remove_fields(type='button')= self.label.addPro.buttonRemove
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.roleButtonAdd
                        .error

            //- Team size
            fieldset
                legend= self.label.addPro.teamSizeTitle
                label(for='org_employees_n')= self.label.addPro.teamSizeDescription
                .fieldset_grid.one_column
                    .form_group
                        input#org_employees_n(type='number' name='org_employees_n' oninput="validateField(event.currentTarget)" data-validate='is-valid-eployees-count')
                        .error
                        label(for='creative_gate_relations')= self.label.addPro.teamMemberLabel
                        .sub_form
                            select#creative_gate_relations(name='org_creative_gate_relations')
                                option(value="" selected="" disabled)= ''
                                - var filteredPersons = self.data.person.filter(person => Array.isArray(person.festival_editions) && person.festival_editions.some(festival => festival.id === 59))
                                - var sortedPersons = filteredPersons.sort(((a, b) => a.firstNameLastName.localeCompare(b.firstNameLastName)))
                                each person in sortedPersons
                                    option(value=person.id)= person.firstNameLastName
                            button.remove_fields(type='button')= self.label.addPro.buttonRemove
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')=self.label.addPro.teamMemberButtonAdd
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.teamSizeButtonAdd

            //- Hourly rate
            fieldset
                legend= self.label.addPro.hourlyRateTitle
                label(for='nextRoleAtFilm')= self.label.addPro.hourlyRateDescription
                .fieldset_grid.one_column
                    .form_group
                        input.rate_field(type='number' name='org_h_rate_from')
                        span.rate_gap= "-"
                        input.rate_field(type='number' name='org_h_rate_to' placeholder='â‚¬')
                        input.hide_fieldset_fields(type='button' value=self.label.addPro.buttonRemove)
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.hourlyRateButtonAdd

            //- Spoken languages
            fieldset.opened
                legend= self.label.addPro.spokenLangugagesTitle
                .fieldset_grid.one_column
                    .form_group
                        label= self.label.addPro.spokenLangugesDescription
                            span.required= ' ' + self.label.addPro.required
                        .sub_form
                            select(name='org_languages' form="thisPersonProfile" oninput="validateField(event.currentTarget)"  data-validate="at-least-one-option-selected")
                                option.placeholder(class='notinvalid' value="" selected="")
                                each language in self.data.languages.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=language.id)= language[`name_${self.locale}`]
                            button.remove_fields(type='button')= self.label.addPro.buttonRemove
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.spokenLangugageButtonAdd
                        .error


            //- Profile image / Logo
            fieldset.opened
                legend= self.label.addPro.profileImageTitle
                .fieldset_grid
                    .form_group#orgProfileImage
                        label(for='profileImg')= self.label.userprofile.profileImg
                        br
                        img.imgPreview.square(alt="user profile pic", src="/assets/img/static/profile_img_1_1.svg" data-placeholder-img='/assets/img/static/profile_img_1_1.svg')
                        .error
                        input.input_file(type='file' name='logoColour' accept='image/*' onchange ='previewImage(event)')
                    .form_group
                        .field
                            label
                                span= self.label.addPro.imageCaption
                                input(type='text' name='caption')
                        .field
                            label
                                span= self.label.addPro.imagePhotographer
                                input(type='text' name='photographer')
                        .field
                            label
                                span= self.label.addPro.imageYear
                                input(type='number' name='img_year' min='1900' max='2100' oninput="validateField(event.currentTarget)" data-validate="is-valid-img-year")
                            .error
                        .field
                            button.remove_fields(type='button')= self.label.addPro.buttonRemove

            //- Header image / Logo
            fieldset
                legend= self.label.addPro.headerImageTitle
                label(for='nextRoleAtFilm')= self.label.addPro.headerImageDescription
                .fieldset_grid.two_columns_even
                    .form_group#orgHeaderImage
                        label(for='profileImg')= self.label.userprofile.profileImg
                        br
                        img.imgPreview(alt="user profile pic", src="/assets/img/static/gallery_img_org.svg" data-placeholder-img="/assets/img/static/gallery_img_org.svg")
                        .error
                        input.input_file(type='file' name='profile_img' accept='image/*' onchange ='previewImage(event)')
                    .form_group.gallery_image_fields
                        .field
                            label
                                span= self.label.addPro.imageCaption
                                input(type='text' name='caption')
                        .field
                            label
                                span= self.label.addPro.imagePhotographer
                                input(type='text' name='photographer')
                        .field
                            label
                                span= self.label.addPro.imageYear
                                input(type='number' name='img_year' min='1900' max='2100' oninput="validateField(event.currentTarget)" data-validate="is-valid-img-year")
                            .error
                        .field
                            button.remove_fields(type='button')= self.label.addPro.buttonRemove

                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.headerImageButtonAdd

            //- Give us some insights who you are
            fieldset.opened
                legend= self.label.addPro.insightsTitle
                .fieldset_grid.two_columns_even
                    .form_group.textarea
                        label
                            span= self.label.addPro.insightsFieldDescriptionTitle
                                span.required= ' ' + self.label.addPro.required
                            textarea(name="org_description_en" oninput="validateField(event.currentTarget)" data-validate="required")
                            .count
                                span.current_count= 0
                                span= "/"
                                span.maximum_count= 500
                            .error
                    .form_group.textarea
                        label(for='org_skills_en')
                            span= self.label.addPro.insightsFieldSkillsTitle
                            textarea#org_skills_en(name="org_skills_en")
                            .count
                                span.current_count= 0
                                span= "/"
                                span.maximum_count= 500

            //- Looking for
            fieldset
                legend= self.label.addPro.lookingForTitle
                label= self.label.addPro.lookingForDescription
                .fieldset_grid.one_column
                    .form_group
                        .sub_form
                            select(name='org_tag_looking_fors')
                                option.default_select(class='invalid' value="" selected="")
                                    //- = self.label.userprofile.proRole
                                each lookingFor in self.data.taglookingfors.sort((a, b) => a.en - b.en)
                                    option(value=lookingFor.id)= lookingFor.en
                            button.remove_fields(type='button')= self.label.addPro.buttonRemove
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.lookingForButtonAdd
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.lookingForButtonAdd

            //- Professional links
            fieldset
                legend= self.label.addPro.professionalLinksTitle
                .div
                .fieldset_grid
                    .form_group
                        label= self.label.addPro.professionalLinksWebpage
                            input(type='url' name='org_webpage_url')
                    .form_group
                        label= self.label.addPro.professionalLinksYoutube
                            input(type='url' name='org_acc_youtube')
                    .form_group
                        label= self.label.addPro.professionalLinksVimeo
                            input(type='url' name='org_acc_vimeo')
                    .form_group
                        label= self.label.addPro.professionalLinksIMDB
                            input(type='url' name='org_acc_imdb')
                    .form_group
                        label= self.label.addPro.professionalLinksEFIS
                            input(type='url' name='org_acc_efis')
                    .form_group
                        label= self.label.addPro.professionalLinksInstagram
                            input(type='url' name='org_acc_instagram')
                    .form_group
                        label= self.label.addPro.professionalLinksFacebook
                            input(type='url' name='org_acc_fb')
                    .form_group
                        label= self.label.addPro.professionalLinksOther
                            input#org_acc_other( type='url' name='org_acc_other')
                .fieldset_grid
                    .form_group
                        input.hide_fieldset_fields(type='button' value=self.label.addPro.buttonRemove)
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.professionalLinksButtonAdd

            //- Public contact info
            fieldset.opened
                legend= self.label.addPro.publicContantInfoTitle
                .fieldset_grid
                    .form_group
                        label= self.label.addPro.publicContactInfoEmail
                            span.required= ' ' + self.label.addPro.required
                            input(type="text" name="org_email" oninput="validateField(event.currentTarget)" data-validate="is-email")
                        .error
                    .form_group
                        label= self.label.addPro.publicContantInfoPhone
                            input(type="text" name="org_phone_nr" oninput="validateField(event.currentTarget)" data-validate="is-phone-nr")
                        .error

            //- Contact address
            fieldset.addr_coll
                legend= self.label.addPro.contactAddressTitle
                .div
                .fieldset_grid
                    .form_group
                        label= self.label.addPro.contactAddressCountry
                            select(name='org_country')
                                option(class='invalid' value="" selected="")
                                each country in self.data.countries.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=country.id)= country[`name_${self.locale}`]
                    .form_group
                        label= self.label.addPro.contactAddressCounty
                            select(name='org_county' style= 'display: none;')
                                option(class='invalid' value="" selected="")
                                each county in self.data.counties.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=county.id)= county[`name_${self.locale}`]
                            input(type="text" name="org_add_county")

                    .form_group
                        label= self.label.addPro.contactAddressMunicipality
                            select(name='org_municipality' style= 'display: none;')
                                option(class='invalid' value="" selected="")
                                each municipality in self.data.municipalities.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=municipality.id)= municipality[`name_${self.locale}`]
                            input(type="text" name="org_add_municipality")

                    .form_group
                        label= self.label.addPro.contactAddressPopulatedPlace
                            input( type='text' name='org_populated_place')
                    .form_group
                        label= self.label.addPro.contactAddressStreetName
                            input( type='text' name='org_street_name')
                    .form_group
                        label= self.label.addPro.contactAddressAddressNumber
                            input( type='text' name='org_address_number')
                    .form_group
                        label= self.label.addPro.contactAddressApartmentNumber
                            input( type='text' name='org_appartment')
                    .form_group
                        label= self.label.addPro.contactAddressPostalCode
                            input( type='text' name='org_postal_code')
                            input( type='hidden', name="id")
                .fieldset_grid
                    .form_group
                        input.hide_fieldset_fields(type='button' value=self.label.addPro.buttonRemove)
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.contactAddressButtonAdd

            //- Filmography
            fieldset.filmography
                legend= self.label.addPro.filmographyTitle
                    div= self.label.addPro.filmographyDescription1
                    div= self.label.addPro.filmographyDescription2
                div.filmographies(style= 'display: none;')
                    .list
                    .filmography_row_template(style='display: none;')
                        .filmography
                            .summary
                                button(type="button" class="remove_fields")
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">'+
                                        <path d="M6 9L12 15L18 9" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>' +
                                    </svg>
                                    strong= '%nr%. %work_name%'
                                    span.role_at_film= ', as a %role_at_film%'
                                span.is_featured_project= "Featured project"
                                    .switch
                                        input(type="checkbox" name="is_featured")
                                        span.slider
                                            span.round
                            .filled_filmography

                    button.add_next_work(type='button'  onclick='showFilmoGraphyFields(event)')= self.label.addPro.filmographyButtonAddNextWork
                .filmography_form.template.fields(style= 'display: none;')
                    .fieldset_grid.two_columns_uneven
                        .form_group
                            label= self.label.addPro.filmographyTypeOfWork
                                span.required= ' ' + self.label.addPro.required
                            - var sortedTypeOfWorks = self.data.typeofworks.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                            - var filteredTypeOfWorks = sortedTypeOfWorks.filter(t => t[`name_${self.locale}`] != 'Education')
                            select(name='org_filmography_type_of_work' oninput="validateField(event.currentTarget)" data-validate="at-least-one-option-selected")
                                option.default_select(class='invalid' value="" selected="")
                                each typeofwork in filteredTypeOfWorks
                                    option(value=typeofwork.id)= typeofwork[`name_${self.locale}`]
                            .error
                        .form_group
                            label= self.label.addPro.filmographyProfession
                                span.required= ' ' + self.label.addPro.required
                            .sub_form
                                select(name='org_filmography_role_at_films' oninput="validateField(event.currentTarget)"  data-validate="at-least-one-option-selected")
                                    option.default_select(class='invalid' value="" selected="")
                                    each roleatfilm in self.data.roleatfilms.sort((a, b) => a.en - b.en)
                                        option(value=roleatfilm.id)= roleatfilm.roleName[self.locale]
                                button.remove_fields(type='button')= self.label.addPro.buttonRemove
                            button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.filmographyProfessionButtonAdd
                            .error
                    .fieldset_grid
                        .form_group
                            label.year_label= self.label.addPro.filmographyFromYear
                                input.year_field#org_appartment( type='text' name='org_filmography_year_from')
                            label.year_label.year_of_completion= self.label.addPro.filmographyYearOfCompletion
                                input.year_field#org_postal_code( type='text' name='org_filmography_year_to')
                    .fieldset_grid
                        .form_group
                            label= self.label.addPro.filmographyNameOfWork
                                span.required= ' ' + self.label.addPro.required
                                input#org_appartment( type='text' name='org_filmography_work_name'  oninput="validateField(event.currentTarget)" data-validate="required")
                                .error
                        .form_group
                            label= self.label.addPro.filmographyWorkWebpage
                                input#org_postal_code( type='text' name='org_filmography_work_url')
                        .form_group
                            label= self.label.addPro.filmographyRunningTime
                                input.running_time_field#org_postal_code( type='text' name='org_filmography_runtime')
                    .fieldset_grid
                        .form_group
                            label= self.label.addPro.filmographyProductionCompany
                                input#org_appartment( type='text' name='org_filmography_org_name')
                        .form_group
                            label= self.label.addPro.filmographyProductionCompanyWebpage
                                input#org_postal_code( type='text' name='org_filmography_org_url')
                    .fieldset_grid.one_column
                        .form_group.textarea
                            label= self.label.addPro.filmographyYourExperience
                                textarea#org_appartment(name='org_filmography_decsription_en')
                                .count
                                    span.current_count= 0
                                    span= "/"
                                    span.maximum_count= 200
                    .fieldset_grid.two_columns_even
                        .form_group
                            label= self.label.addPro.filmographyIsFeaturedProject
                                .switch
                                    input(type="checkbox" name="org_filmography_is_featured" value="1" onclick='toggleIsFeatured(event)')
                                    span.slider
                                        span.round
                        .form_group
                    .fieldset_grid.two_columns_even.still
                        .form_group
                            img.imgPreview(alt="gallery picture", src="/assets/img/static/gallery_img_org.svg" data-placeholder-img='/assets/img/static/gallery_img_org.svg')
                            .error
                            input.input_file(type='file' name='stills' accept='image/*' onchange ='previewImage(event)')

                    .fieldset_grid.two_columns_even.component_buttons
                        input(type="hidden" name="id" value="")

                        button.send_data(type='button' onclick='sendFilmography(event, false)')= self.label.addPro.buttonSubmit
                            span
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_3410_46764)">
                                    <path d="M22 11.0799V11.9999C21.9988 14.1563 21.3005 16.2545 20.0093 17.9817C18.7182 19.7088 16.9033 20.9723 14.8354 21.5838C12.7674 22.1952 10.5573 22.1218 8.53447 21.3744C6.51168 20.6271 4.78465 19.246 3.61096 17.4369C2.43727 15.6279 1.87979 13.4879 2.02168 11.3362C2.16356 9.18443 2.99721 7.13619 4.39828 5.49694C5.79935 3.85768 7.69279 2.71525 9.79619 2.24001C11.8996 1.76477 14.1003 1.9822 16.07 2.85986" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M22 4L12 14.01L9 11.01" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_3410_46764">
                                    <rect width="24" height="24" fill="white"/>
                                    </clipPath>
                                    </defs>
                                </svg>

                        button.remove_data(type='button' onclick='removeFilmography(event)')= self.label.addPro.buttonRemove2
                            span
                                <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_1333_33497)">
                                    <path d="M12.5 22C18.0228 22 22.5 17.5228 22.5 12C22.5 6.47715 18.0228 2 12.5 2C6.97715 2 2.5 6.47715 2.5 12C2.5 17.5228 6.97715 22 12.5 22Z" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M15.5 9L9.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M9.5 9L15.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_1333_33497">
                                    <rect width="24" height="24" fill="white" transform="translate(0.5)"/>
                                    </clipPath>
                                    </defs>
                                </svg>


                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.filmographyButtonAdd

            //- Ongoing projects
            fieldset.filmography
                legend= self.label.addPro.ongoingProjectsTitle
                    div= self.label.addPro.ongoingProjectsDescription
                .on_going_projects(style= 'display: none;')
                    .list
                    button.add_next_work(type='button' onclick='showFilmoGraphyFields(event)')= self.label.addPro.filmographyButtonAddNextWork
                .filmography_form.template(style= 'display: none;')
                    .fieldset_grid.two_columns_uneven
                        .form_group
                            label= self.label.addPro.filmographyTypeOfWork
                                span.required= ' ' + self.label.addPro.required
                            - var sortedTypeOfWorks = self.data.typeofworks.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                            - var filteredTypeOfWorks = sortedTypeOfWorks.filter(t => t[`name_${self.locale}`] != 'Education')
                            select(name='org_ongoing_project_type_of_work' oninput="validateField(event.currentTarget)" data-validate="at-least-one-option-selected")
                                option.default_select(class='invalid' value="" selected="")
                                each typeofwork in filteredTypeOfWorks
                                    option(value=typeofwork.id)= typeofwork[`name_${self.locale}`]
                            .error
                        .form_group
                            label= self.label.addPro.filmographyProfession
                            .sub_form
                                select(name='org_ongoing_project_role_at_films')
                                    option.default_select(class='invalid' value="" selected="")
                                        //- = self.label.userprofile.proRole
                                    each roleatfilm in self.data.roleatfilms.sort((a, b) => a.en - b.en)
                                        option(value=roleatfilm.id)= roleatfilm.roleName[self.locale]
                                button.remove_fields(type='button')= self.label.addPro.buttonRemove
                            button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.ongoingProjectProfessionButtonAdd
                    .fieldset_grid
                        .form_group
                            label= self.label.addPro.filmographyNameOfWork
                                span.required= ' ' + self.label.addPro.required
                                input#org_appartment( type='text' name='org_ongoing_project_work_name'  oninput="validateField(event.currentTarget)" data-validate="required")
                                .error
                        .form_group
                            label= self.label.addPro.filmographyWorkWebpage
                                input#org_postal_code( type='text' name='org_ongoing_project_work_url' autocomplete="off")
                    .fieldset_grid.one_column
                        .form_group
                            label= self.label.addPro.ongoingProjecsStageOfDevelopment
                                .sub_form
                                    select(name='org_ongoing_project_status'  oninput="validateField(event.currentTarget)" data-validate="at-least-one-option-selected")
                                        option.default_select(class='invalid' value="" selected="")
                                        each roleatfilm in self.data.projectStatus.sort((a, b) => a.status - b.status)
                                            option(value=roleatfilm.id)= roleatfilm.status
                                    .error

                    .fieldset_grid.one_column
                        .form_group
                            label= self.label.addPro.ongoingProjecsLookingFor
                            .sub_form
                                select(name='org_ongoing_project_tag_looking_fors')
                                    option.default_select(class='invalid' value="" selected="")
                                    each lookingFor in self.data.taglookingfors.sort((a, b) => a.en - b.en)
                                        option(value=lookingFor.id)= lookingFor[self.locale]
                                button.remove_fields(type='button')= self.label.addPro.buttonRemove
                            button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.ongoingProjecsButtonAddLookingFor
                    .fieldset_grid.one_column
                        .form_group.textarea
                            label= self.label.addPro.filmographyYourExperience
                                textarea#org_appartment(name='org_ongoing_project_decsription_en' autocomplete="off")
                                .count
                                    span.current_count= 0
                                    span= "/"
                                    span.maximum_count= 200
                    .fieldset_grid.two_columns_even.component_buttons
                        input(type="hidden" name="id")

                        button.send_data(type='button' onclick='sendFilmography(event, true)')= self.label.addPro.buttonSubmit
                            span
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_3410_46764)">
                                    <path d="M22 11.0799V11.9999C21.9988 14.1563 21.3005 16.2545 20.0093 17.9817C18.7182 19.7088 16.9033 20.9723 14.8354 21.5838C12.7674 22.1952 10.5573 22.1218 8.53447 21.3744C6.51168 20.6271 4.78465 19.246 3.61096 17.4369C2.43727 15.6279 1.87979 13.4879 2.02168 11.3362C2.16356 9.18443 2.99721 7.13619 4.39828 5.49694C5.79935 3.85768 7.69279 2.71525 9.79619 2.24001C11.8996 1.76477 14.1003 1.9822 16.07 2.85986" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M22 4L12 14.01L9 11.01" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_3410_46764">
                                    <rect width="24" height="24" fill="white"/>
                                    </clipPath>
                                    </defs>
                                </svg>

                        button.remove_data(type='button' onclick='removeFilmography(event)')= self.label.addPro.buttonRemove2
                            span
                                <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_1333_33497)">
                                    <path d="M12.5 22C18.0228 22 22.5 17.5228 22.5 12C22.5 6.47715 18.0228 2 12.5 2C6.97715 2 2.5 6.47715 2.5 12C2.5 17.5228 6.97715 22 12.5 22Z" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M15.5 9L9.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M9.5 9L15.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_1333_33497">
                                    <rect width="24" height="24" fill="white" transform="translate(0.5)"/>
                                    </clipPath>
                                    </defs>
                                </svg>
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.ongoingProjectsButtonAdd

            //- Client List
            fieldset
                legend= self.label.addPro.clientListTitle
                .fieldset_grid.
                label= self.label.addPro.clientListDescription
                .clients
                .sub_form
                    .fieldset_grid
                        .form_group
                            label= self.label.addPro.clientListClientName
                                input(list='org_client_name' name="org_client_name")
                                datalist(id='org_client_name')
                                    option.default_select(class='invalid' value="" selected="")
                                    - var filteredOrganisations = self.data.organisations.filter(t => t[`name_${self.locale}`])
                                    each organisation in filteredOrganisations.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                        option(value=organisation[`name_${self.locale}`])
                        .form_group
                            label= self.label.addPro.clientListClientURL
                                input(type='url' name='org_client_url' autocomplete="off")
                        button.remove_fields(type='button')= self.label.addPro.buttonRemove

                .fieldset_grid.two_columns_even
                    .form_group
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.clientListButtonAdd

                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.clientListButtonAdd

            //- Showreel
            fieldset
                legend= self.label.addPro.showreelTitle
                label= self.label.addPro.showreelDescription
                .fieldset_grid.one_column
                    .form_group
                        input#showreel(type='url' name='org_showreel' oninput="validateField(event.currentTarget)" data-validate="is-showreel")
                        button.hide_fieldset_fields(type='button')= self.label.addPro.buttonRemove
                        .error
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.showreelButtonAdd

            //- Audioreel
            fieldset
                legend= self.label.addPro.audioreelTitle
                label= self.label.addPro.audioreelDescription
                .fieldset_grid.one_column
                    .form_group
                        input.input_file#audioreel(type='file' name='org_audioreel' accept="audio/*" onchange ='previewAudioreel(event)')
                        audio(id="audioreel_preview" style= 'display: none;' controls)
                        .error
                        button.hide_fieldset_fields(type='button')= self.label.addPro.buttonRemove
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.audioreelButtonAdd

            //- Image Gallery
            fieldset
                legend= self.label.addPro.imageGalleryTitle
                label= self.label.addPro.imageGalleryDescription
                .sub_form.gallery(data-max-repeatable-elements='5')
                    .fieldset_grid.two_columns_even
                        .form_group
                            img.imgPreview(alt="gallery picture", src="/assets/img/static/gallery_img_org.svg" data-placeholder-img='/assets/img/static/gallery_img_org.svg')
                            div.error
                            input.input_file(type='file' name='images' accept='image/*' onchange ='previewImage(event)')
                        .form_group.gallery_image_fields
                            .field
                                label
                                    span= self.label.addPro.imageCaption
                                    input(type='text' name='caption')
                            .field
                                label
                                    span= self.label.addPro.imagePhotographer
                                    input(type='text' name='photographer')
                            .field
                                label
                                    span= self.label.addPro.imageYear
                                    input(type='number' name='img_year' min='1900' max='2100' data-validate="is-valid-img-year")
                                .error
                                input(type="hidden" name="id")
                            .field
                                button.remove_fields(type='button')= self.label.addPro.buttonRemove
                .fieldset_grid.two_columns_even
                    .form_group
                        button.duplicate_gallery_fields(type='button')= self.label.addPro.imageGalleryButtonAddNext
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.imageGalleryButtonAdd

            //- Yout profile page url
            fieldset.opened
                legend= self.label.addPro.profilePageUrlTitle
                .fieldset_grid.one_column
                    .form_group
                        label= self.label.addPro.profilePageUrlDescription
                            input(type='text' name='profile_url' disabled="true")

            // - Feedback
            fieldset
                legend= self.label.addPro.feedbackTitle
                .fieldset_grid.buttons
                    .form_group
                        label= self.label.addPro.feedbackDescription
                        a.button_send_feedback(href="mailto:ux@poff.ee&subject=Feedback%20from%20Creative%20Gate%20My%20Profile%20form")= self.label.addPro.feedbackButton
                .fieldset_grid
                    .form_group
                        label
                            .switch
                                input(type="checkbox" name="org_ok_to_contact")
                                span.slider
                                    span.round
                            span.label= self.label.addPro.feedbackCheckbox

            fieldset
                .fieldset_grid.buttons
                    .form_group
                        input.login_input(type='button' id='saveOrganisationButton' name='saveOrganisationButton' onclick='saveOrganisationForm()' value=self.label.userprofile.saveProfile)


    section.userprofile.addProSection(style= 'display:none;')
        form.form#thisPersonProfile

            //- .events_search_page_title_wrapper
            //- h1.events_search_page_title= self.label.industry.myProProfile

            dialog#personProfileSent(display='none')
                P= self.label.userprofile.profileSaved
                p.btn.btn_primary(onclick='location.reload()')= "OK"

            fieldset#nameSet
                legend= self.label.userprofile.nameSet
                .fieldset_grid
                    //- firstName
                    .form_group
                        label.person_profile_label(for='firstName')= self.label.userprofile.firstName
                            span.required= ' ' + self.label.userprofile.required
                        input.login_input#firstName.form_control( type='text' name='firstName' autocomplete="off" oninput="validateRequiredField(this.id, 'textLength')" required)
                        //- placeholder=`${self.label.userprofile.required}`
                        div#firstNameHelp(class='valid')= self.label.userprofile.firstNameHelp
                    //- lastName
                    .form_group
                        label.person_profile_label(for='lastName')= self.label.userprofile.lastName
                            span.required= ' ' + self.label.userprofile.required
                        input.login_input#lastName.form_control( type='text' name='lastName' autocomplete="off" oninput="validateRequiredField(this.id, 'textLength')" required)
                        div#lastNameHelp(class='valid')= self.label.userprofile.lastNameHelp

            fieldset#roleAtFilmSet
                //- role_at_films
                legend= self.label.userprofile.proRole
                        div#roleAtFilmTemplate(style= 'display: none;')
                            .fieldset_grid
                                .form_group
                                    label.person_profile_label(for='roleatfilm')= self.label.userprofile.proRole
                                        span.required= ' ' + self.label.userprofile.required
                                    select.login_input.role_at_film#roleatfilm(name='roleatfilm' form="thisPersonProfile" required)
                                        option.login_input.default_select(class='invalid' value="" selected="")
                                        //- = self.label.userprofile.required
                                        each roleatfilm in self.data.roleatfilms.sort((a, b) => a.en - b.en)
                                            option.login_input(value=roleatfilm.id)= roleatfilm.roleName[self.locale]
                                    div.help(class='valid') You need to enter at leat one profession
                                    input.login_input.btn_secondary.deleteButton(type='button' value="x")
                .fieldset_grid
                    .form_group
                        //- label.person_profile_label(for='nextRoleAtFilm')= self.label.userprofile.addRoleAtFilm
                        input.login_input.btn_primary(type='button' name='nextRoleAtFilm' id='nextRoleAtFilm' onclick='addNextRoleAtFilm();' value=self.label.userprofile.addRoleAtFilm)

            fieldset#tagLookingForSet
                //- tag_looking_for
                legend= self.label.userprofile.lookingFor
                        div#tagLookingForTemplate(style= 'display: none;')
                            .fieldset_grid
                                .form_group
                                    label.person_profile_label(for='taglookingfor')= self.label.userprofile.lookingForTag
                                        span.required= ' ' + self.label.userprofile.required
                                    select.login_input.tag_looking_for(name='taglookingfor' form="thisPersonProfile")
                                        option.login_input.default_select(class='invalid' value="" selected="")
                                        //- = self.label.userprofile.required
                                        each taglookingfor in self.data.taglookingfors.sort((a, b) => a.en - b.en)
                                            option.login_input(value=taglookingfor.id)= taglookingfor[self.locale]
                                    div.help(class='valid') You need to enter at leat one looking for tag
                                    input.login_input.btn_secondary.deleteButton(type='button' value="x")
                .fieldset_grid
                    .form_group
                        //- label.person_profile_label(for='nextRoleAtFilm')= self.label.userprofile.addRoleAtFilm
                        input.login_input.btn_primary(type='button' name='nextTagLookingFor' id='nextTagLookingFor' onclick='addNextTagLookingFor();' value=self.label.userprofile.addTagLookingFor)

            fieldset#mainInfoSet
                legend= self.label.userprofile.mainInfoSet
                .fieldset_grid
                    //- gender
                    .form_group
                        label.person_profile_label(for='gender')= self.label.userprofile.gender
                            span.required= ' ' + self.label.userprofile.required
                        select.login_input#gender(name='gender' form="thisPersonProfile" oninput="validateRequiredField(this.id, 'gender')" required)
                            option.login_input(class='invalid' value="" selected="")
                            //- = self.label.userprofile.required
                            each gender in self.data.genders.sort((a, b) => a.id - b.id)
                                option.login_input(value=gender.id)= gender[self.locale]
                        div#genderHelp(class='valid')= self.label.userprofile.genderHelp
                    //- dateOfBirth / dateofbirth
                    .form_group
                        label.person_profile_label(for='dateOfBirth')= self.label.userprofile.birthday
                            span.required= ' ' + self.label.userprofile.required
                        input.login_input#dateOfBirth.form_control( type='date' name='dateOfBirth' autocomplete="off" required)
                        div#dateOfBirthHelp(class='valid') Korrektne sÃ¼nnipÃ¤ev on vajalik (vanus vahemikus 12-116)!

                    //- native_lang / native_lang
                    .form_group
                        label.person_profile_label(for='native_lang')= self.label.userprofile.nativeLang
                        .input_dropdown
                            select.login_input#native_lang(name='native_lang' form="thisPersonProfile")
                                option.login_input.placeholder(class='notinvalid' value="" selected="")
                                //- = self.label.userprofile.required
                                //- each language in self.data.languages.sort((a, b) => a.id - b.id)
                                each language in self.data.languages.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option.login_input(value=language.id)= language[`name_${self.locale}`]

            fieldset#otherLangSet
                //- otherLang
                legend= self.label.userprofile.otherLang
                    div#otherLangTemplate(style= 'display: none;')
                        .fieldset_grid
                            .form_group
                                label.person_profile_label(for='other_lang')= self.label.userprofile.otherLang
                                select.login_input.other_lang(name='other_lang' form="thisPersonProfile")
                                    option.login_input.default_select(class='invalid' value="" selected="")
                                    //- = self.label.userprofile.required
                                    each otherLang in self.data.languages.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                        option.login_input(value=otherLang.id)= otherLang[`name_${self.locale}`]
                                input.login_input.btn_secondary.deleteButton(type='button' value="x")
                                .fieldset_grid
                .fieldset_grid
                    .form_group
                        input.login_input.btn_primary(type='button' name='nextOtherLang' id='nextOtherLang' onclick='addNextOtherLang();' value='Lisa veel keel')
                .fieldset_grid
                    //- bio_en
                    .form_group
                        label.person_profile_label(for='bio_en')= self.label.userprofile.biography
                        textarea.login_input#bio_en(form="thisPersonProfile" name="bio_en")

            fieldset#professionalInfoSet
                legend= self.label.userprofile.professionalInfoSet
                .fieldset_grid
                    //- acc_imdb
                    .form_group
                        label.person_profile_label(for='acc_imdb')= self.label.userprofile.accImdb
                        input.login_input#acc_imdb.form_control( type='url' pattern="https://.*" placeholder=`${self.label.userprofile.placeholderUrl}` name='acc_imdb' autocomplete="off")
                    //- acc_efis
                    .form_group
                        label.person_profile_label(for='acc_efis')= self.label.userprofile.accEfis
                        input.login_input#acc_efis.form_control( type='url' pattern="https://.*" placeholder=`${self.label.userprofile.placeholderUrl}` name='acc_rfis' autocomplete="off")
                    //- acc_castupload
                    .form_group
                        label.person_profile_label(for='acc_castupload')= self.label.userprofile.accCastupload
                        input.login_input#acc_castupload.form_control( type='url' pattern="https://.*" placeholder=`${self.label.userprofile.placeholderUrl}` name='acc_castupload' autocomplete="off")
                .fieldset_grid
                    //- acc_instagram
                    .form_group
                        label.person_profile_label(for='acc_instagram')= self.label.userprofile.accInstagram
                        input.login_input#acc_instagram.form_control( type='url' pattern="https://.*" placeholder=`${self.label.userprofile.placeholderUrl}` name='acc_instagram' autocomplete="off")
                    //- acc_fb
                    .form_group
                        label.person_profile_label(for='acc_fb')= self.label.userprofile.accFb
                        input.login_input#acc_fb.form_control( type='url' pattern="https://.*" placeholder=`${self.label.userprofile.placeholderUrl}` name='acc_fb' autocomplete="off")
                    //- acc_etalenta
                    .form_group
                        label.person_profile_label(for='acc_etalenta')= self.label.userprofile.accEtalenta
                        input.login_input#acc_etalenta.form_control( type='url' pattern="https://.*" placeholder=`${self.label.userprofile.placeholderUrl}` name='acc_etalenta' autocomplete="off")
                .fieldset_grid
                    //- acc_other
                    .form_group
                        label.person_profile_label(for='acc_other')= self.label.userprofile.accOther
                        input.login_input#acc_other.form_control( type='url' pattern="https://.*" placeholder=`${self.label.userprofile.placeholderUrl}` name='acc_other' autocomplete="off")
                    //- webpage_url
                    .form_group
                        label.person_profile_label(for='webpage_url')= self.label.userprofile.webpageUrl
                        input.login_input#webpage_url.form_control( type='url' pattern="https://.*" placeholder=`${self.label.userprofile.placeholderUrl}` name='webpage_url' autocomplete="off")
                .fieldset_grid
                    //-  acting_age_from
                    .form_group
                        label.person_profile_label(for='acting_age_from')= self.label.userprofile.actingAgeFrom
                        input.login_input#acting_age_from.form_control(type='number' name='acting_age_from' autocomplete="off")
                    //-  acting_age_to
                    .form_group
                        label.person_profile_label(for='acting_age_to')= self.label.userprofile.actingAgeTo
                        input.login_input#acting_age_to.form_control(type='number' name='acting_age_to' autocomplete="off")
                .fieldset_grid
                    //- stature
                    .form_group
                        label.person_profile_label(for='stature')= self.label.userprofile.stature
                        select.login_input#stature(name='stature' form="thisPersonProfile")
                            option.login_input(class='invalid' value="" selected="")
                            //- = self.label.userprofile.select
                            each stature in self.data.statures.sort((a, b) => a.en - b.en)
                                option.login_input(value=stature.id)= stature[`name_${self.locale}`]
                    //-  height_cm
                    .form_group
                        label.person_profile_label(for='height_cm')= self.label.userprofile.height
                        input.login_input#height_cm.form_control( type='number' name='height_cm' autocomplete="off")
                    //-  weight_kg
                    .form_group
                        label.person_profile_label(for='weight_kg')= self.label.userprofile.weight
                        input.login_input#weight_kg.form_control( type='number' name='weight_kg' autocomplete="off")
                .fieldset_grid
                    //- eye_colour
                    .form_group
                        label.person_profile_label(for='eye_colour')= self.label.userprofile.eyeColour
                        select.login_input#eye_colour(name='eye_colour' form="thisPersonProfile")
                            option.login_input(class='invalid' value="" selected="")
                            //- = self.label.userprofile.select
                            each eyecolour in self.data.eyecolours.sort((a, b) => a.en - b.en)
                                option.login_input(value=eyecolour.id)= eyecolour[`name_${self.locale}`]
                    //- hair_colour
                    .form_group
                        label.person_profile_label(for='hair_colour')= self.label.userprofile.hairColour
                        select.login_input#hair_colour(name='hair_colour' form="thisPersonProfile")
                            option.login_input(class='invalid' value="" selected="")
                            //- = self.label.userprofile.select
                            each haircolour in self.data.haircolours.sort((a, b) => a.en - b.en)
                                option.login_input(value=haircolour.id)= haircolour[`name_${self.locale}`]
                    //- hair_length
                    .form_group
                        label.person_profile_label(for='hair_length')= self.label.userprofile.hairLength
                        select.login_input#hair_length(name='hair_length' form="thisPersonProfile")
                            option.login_input(class='invalid' value="" selected="")
                            //- = self.label.userprofile.select
                            each hairlength in self.data.hairlengths.sort((a, b) => a.en - b.en)
                                option.login_input(value=hairlength.id)= hairlength[`name_${self.locale}`]
                .fieldset_grid
                    //- pitch_of_voice
                    .form_group
                        label.person_profile_label(for='pitch_of_voice')= self.label.userprofile.pitchOfVoice
                        select.login_input#pitch_of_voice(name='pitch_of_voice' form="thisPersonProfile")
                            option.login_input(class='invalid' value="" selected="")
                            //- = self.label.userprofile.select
                            each pitchofvoice in self.data.pitchofvoices.sort((a, b) => a.en - b.en)
                                option.login_input(value=pitchofvoice.id)= pitchofvoice[`name_${self.locale}`]
                .fieldset_grid
                    //- skills_en
                    .form_group
                        label.person_profile_label(for='skills_en')= self.label.userprofile.skills
                        textarea.login_input#skills_en(form="thisPersonProfile" name="skills_en")
                    //- looking_for
                    .form_group
                        label.person_profile_label(for='looking_for')= self.label.userprofile.lookingForText
                        textarea.login_input#looking_for(form="thisPersonProfile" name="looking_for")

            fieldset#profileImgSet
                legend= self.label.userprofile.profileImgSet
                .fieldset_grid
                    .form_group#profileImage
                        label.person_profile_label= self.label.userprofile.profileImg
                        br
                        img.imgPreview.square(alt="user profile pic", src="/assets/img/static/profile_img_1_1.svg")
                        div#imgError
                        input.input_file#profileImg(type='file' name='filename' accept='image/png, image/jpeg, image/jpg' onchange ='validateImageAndPreview(this.files[0], "profileImage", "profile")')
                    .form_group.d-none
                        label.person_profile_label(for='photographer')= self.label.userprofile.photographer
                        input.login_input#photographer.form-control(type='text' name='photographer' autocomplete="off")
                    .form_group.d-none
                        label.person_profile_label(for='img_year')= self.label.userprofile.imageYear
                        input.login_input#img_year.form-control(type='number' name='img_year' min='2000' max='3000' autocomplete="off"  oninput="validateField(event.currentTarget)" data-validate="is-valid-img-year")
                        .error

            fieldset#galleryImgSet
                //- hr(style='color: black')
                legend= legend= self.label.userprofile.galleryImgSet
                        //- p(style='color: black') GALERIIPILDID (PERSON.IMAGES)
                        div#galleryTemplate(style= 'display: none')
                            .fieldset_grid
                                .form_group
                                    label.person_profile_label(for='gallery_img')= self.label.userprofile.galleryImg
                                    br
                                    img.imgPreview.gallery_upload(alt="Gallery image", src="/assets/img/static/gallery_img.svg")
                                    input.input_file.galleryImg(type='file' name='gallery_img' accept='image/png, image/jpeg, image/jpg')
                                .form_group.d-none
                                    label.person_profile_label(for='galleryImagePhotographer')= self.label.userprofile.photographer
                                    input.login_input.galleryImagePhotographer.form-control(type='text' name='galleryImagePhotographer' autocomplete="off")
                                .form_group.d-none
                                    label.person_profile_label(for='galleryImageYear')= self.label.userprofile.imageYear
                                    input.login_input.galleryImageYear.form-control(type='number' name='galleryImageYear' min='2000' max='3000' autocomplete="off")
                                .form_group.d-none
                                    label.person_profile_label(for='add_new_img')= self.label.userprofile.delete
                                    input.login_input.btn_secondary.deleteGalleryImage(type='button' value="x")
                .fieldset_grid
                    .form_group
                        input.login_input.btn_primary(type='button' id='addNextGalleryImg' onclick='addGalleryImage()' value=self.label.userprofile.addGalleryImg)

            fieldset.d-none#reelsSet
                legend= self.label.userprofile.reelsSet
                .fieldset_grid
                    //-  showreel
                    .form_group
                        label.person_profile_label(for='showreel')= self.label.userprofile.showreel
                        input.login_input#showreel.form_control( type='url' pattern="https://.*" placeholder=`${self.label.userprofile.placeholderUrl}` name='showreel' autocomplete="off")
                    //- audioreel
                    .form_group
                        div#audioError
                        label.person_profile_label(for='audioreel')= self.label.userprofile.audioreel
                        input.login_input.input_file#audioreel.form_control(type='file' name='filename' accept="audio/*" onchange ='validateAudioAndPreview(this.files[0])')

            fieldset#contactInfoSet
                legend= self.label.userprofile.contactInfoSet
                .fieldset_grid
                    //-  phoneNr
                    .form_group
                        label.person_profile_label(for='phoneNr')= self.label.userprofile.phone
                        input.login_input#phoneNr.form_control( type='text' name='phoneNr' autocomplete="off")
                    //- eMail
                    .form_group
                        label.person_profile_label(for='eMail')= self.label.userprofile.email
                        input.login_input#eMail.form_control( type='email' name='eMail' autocomplete="off")
                        div#emailHelp(class='valid')= 'Please correct the e-mail address'
                .fieldset_grid
                    //- repr_org_name
                    .form_group
                        label.person_profile_label(for='repr_org_name')= self.label.userprofile.reprOrgName
                        input.login_input#repr_org_name.form_control( type='text' name='repr_org_name' autocomplete="off")
                    //- repr_org_url
                    .form_group
                        label.person_profile_label(for='repr_org_url')= self.label.userprofile.reprOrgUrl
                        input.login_input#repr_org_url.form_control( type='url' pattern="https://.*" name='repr_org_url' autocomplete="off")
                .fieldset_grid
                    //- repr_p_name
                    .form_group
                        label.person_profile_label(for='repr_p_name')= self.label.userprofile.reprPName
                        input.login_input#repr_p_name.form_control( type='text' name='repr_p_name' autocomplete="off")
                    //- repr_phone
                    .form_group
                        label.person_profile_label(for='repr_phone')= self.label.userprofile.reprPhone
                        input.login_input#repr_phone.form_control( type='text' name='repr_phone' autocomplete="off")
                    //- repr_email
                    .form_group
                        label.person_profile_label(for='repr_email')= self.label.userprofile.reprEmail
                        input.login_input#repr_email.form_control( type='email' name='repr_email' autocomplete="off")

            fieldset#addressSet
                legend= self.label.userprofile.addressSet
                .fieldset_grid
                    .form_group
                        input.login_input.form_control#addr_strapi_id(type='number' autocomplete="off" style= 'display: none;')
                        label.person_profile_label(for='country')= self.label.userprofile.country
                        select.login_input#country(name='country' form="thisPersonProfile")
                            option.login_input(class='invalid' value="" selected="")
                            //- = self.label.userprofile.select
                            //- each country in self.data.countries.sort((a, b) => a.name_en - b.name_en)
                            each country in self.data.countries.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                option.login_input(value=country.id)= country[`name_${self.locale}`]
                    .form_group
                        label.person_profile_label(for='county')= self.label.userprofile.county
                        select.login_input#county(name='county' form="thisPersonProfile")
                            option.login_input(class='invalid' value="" selected="")
                            //- = self.label.userprofile.select
                            //- each county in self.data.counties.sort((a, b) => a.id - b.id)
                            each county in self.data.counties.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                option.login_input(value=county.id)= county[`name_${self.locale}`]
                    .form_group
                        label.person_profile_label(for='municipality')= self.label.userprofile.municipality
                        select.login_input#municipality(name='municipality' form="thisPersonProfile")
                            option.login_input(class='invalid' value="" selected="")
                            //- = self.label.userprofile.select
                            //- each municipality in self.data.municipalities.sort((a, b) => a.id - b.id)
                            each municipality in self.data.municipalities.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                option.login_input(value=municipality.id)= municipality[`name_${self.locale}`]
                .fieldset_grid
                    .form_group
                        label.person_profile_label(for='popul_place')= self.label.userprofile.populPlace
                        input.login_input#popul_place.form_control(type='text' name='popul_place')
                    .form_group
                        label.person_profile_label(for='street_name')= self.label.userprofile.streetName
                        input.login_input#street_name.form_control(type='text'  name='street_name')
                    .form_group
                        label.person_profile_label(for='address_number')= self.label.userprofile.addressHouseNumber
                        input.login_input#address_number.form_control(type='text' name='address_number')
                .fieldset_grid
                    .form_group
                        label.person_profile_label(for='appartment')= self.label.userprofile.addressApptNumber
                        input.login_input#appartment.form_control(type='text' name='addrHouseNumber')
                    .form_group
                        label.person_profile_label(for='postal_code')= self.label.userprofile.addressPostalCode
                        input.login_input#postal_code.form_control(type='text' name='postal_code')

            fieldset#educationSet
                legend= self.label.userprofile.profEducation
                    .eduworks_item#profEducationTemplate(style= 'display: none; ')
                        .fieldset_grid
                            input.login_input.strapi_id.form_control(type='number' autocomplete="off" style= 'display: none;')
                            //- type_of_work
                            input.login_input.type_of_work(type="hidden" name="type_of_work" value="7")
                            //-  year_from
                            .form_group
                                label.person_profile_label(for='year_from')= self.label.userprofile.yearFrom
                                input.login_input.year_from.form_control( type='number' name='year_from' autocomplete="off")
                            //-  year_to
                            .form_group
                                label.person_profile_label(for='year_to')= self.label.userprofile.yearTo
                                input.login_input.year_to.form_control( type='number' name='year_to' autocomplete="off")
                        .fieldset_grid
                            //- org_name
                            .form_group
                                label.person_profile_label(for='org_name')= self.label.userprofile.eduOrgName
                                    span.required= ' ' + self.label.userprofile.required
                                input.login_input.org_name.form_control( type='text' name='org_name' autocomplete="off" required)
                                div.org_name_help(class='valid') Organisatsioon vajalik!
                            //- org_department
                            .form_group
                                label.person_profile_label(for='org_department')= self.label.userprofile.eduOrgDep
                                input.login_input.org_department.form_control( type='text' name='org_department' autocomplete="off")
                            //- degree
                            .form_group
                                label.person_profile_label(for='degree')= self.label.userprofile.eduDegree
                                input.login_input.degree.form_control( type='text' name='degree' autocomplete="off")
                        .fieldset_grid
                            //- org_url
                            .form_group
                                label.person_profile_label(for='org_url')= self.label.userprofile.eduOrgUrl
                                input.login_input.org_url.form_control( type='text' name='org_url' autocomplete="off")
                        input.login_input.btn_secondary.deleteButton(type='button' value="x")
                .fieldset_grid
                    .form_group
                        //- label.person_profile_label(for='addNextEducationBtn')= self.label.userprofile.addEducation
                        input.login_input.btn_primary.addNextEducation(type='button' id='addNextEducationBtn' onclick='addNextEducation();' value=self.label.userprofile.addEducation)

            fieldset#workExperienceSet
                legend= self.label.userprofile.worksFilmography
                    .eduworks_item#filmographyTemplate(style= 'display: none; ')
                        .fieldset_grid
                            input.login_input.strapi_id.form_control(type='number' autocomplete="off" style= 'display: none;')
                            //- type_of_work
                            .form_group
                                label.person_profile_label(for='type_of_work')= self.label.userprofile.typeOfWork
                                    span.required= ' ' + self.label.userprofile.required
                                select.login_input.type_of_work(name='type_of_work' form="thisPersonProfile" required)
                                    option.login_input(class='invalid' value="" selected="")
                                    //- Sort from A to B
                                    - var sortedTypeOfWorks = self.data.typeofworks.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    //- Filter out Education
                                    - var filteredTypeOfWorks = sortedTypeOfWorks.filter(t => t[`name_${self.locale}`] != 'Education')
                                    each typeofwork in filteredTypeOfWorks
                                        option.login_input(value=typeofwork.id)= typeofwork[`name_${self.locale}`]
                                div.type_of_work_help(class='valid') TÃ¶Ã¶tÃ¼Ã¼p vajalik!
                            .form_group
                                label.person_profile_label(for='roleatfilm')= self.label.userprofile.proRole
                                select.login_input(name='roleatfilm' form="thisPersonProfile")
                                    option.login_input.default_select(class='invalid' value="" selected="")
                                        //- = self.label.userprofile.proRole
                                    each roleatfilm in self.data.roleatfilms.sort((a, b) => a.en - b.en)
                                        option.login_input(value=roleatfilm.id)= roleatfilm.roleName[self.locale]
                        .fieldset_grid
                            //-  year_from
                            .form_group
                                label.person_profile_label(for='year_from')= self.label.userprofile.yearFrom
                                input.login_input.year_from.form_control( type='number' name='year_from' autocomplete="off")
                            //-  year_to
                            .form_group
                                label.person_profile_label(for='year_to')= self.label.userprofile.yearTo
                                input.login_input.year_to.form_control( type='number' name='year_to' autocomplete="off")
                        .fieldset_grid
                            //- work_name
                            .form_group
                                label.person_profile_label(for='work_name')= self.label.userprofile.workName
                                    span.required= ' ' + self.label.userprofile.required
                                input.login_input.work_name.form_control( type='text' name='work_name' autocomplete="off" required)
                                div.work_name_help(class='valid') TÃ¶Ã¶/filmi nimi vajalik!

                            //- work_url
                            .form_group
                                label.person_profile_label(for='work_url')= self.label.userprofile.workUrl
                                input.login_input.work_url.form_control( type='text' name='work_url' autocomplete="off")
                        .fieldset_grid
                            //- actor_role
                            .form_group
                                label.person_profile_label(for='actor_role')= self.label.userprofile.actorRole
                                input.login_input.actor_role.form_control( type='text' name='actor_role' autocomplete="off")
                        .fieldset_grid
                            //- org_name
                            .form_group
                                label.person_profile_label(for='org_name')= self.label.userprofile.prodOrgName
                                input.login_input.org_name.form_control( type='text' name='org_name' autocomplete="off")
                            //- org_url
                            .form_group
                                label.person_profile_label(for='org_url')= self.label.userprofile.prodOrgUrl
                                input.login_input.org_url.form_control( type='text' name='org_url' autocomplete="off")
                        input.login_input.btn_secondary.deleteButton(type='button' value="x")
                .fieldset_grid
                    .form_group
                        //- label.person_profile_label(for='addFilmographyWork')= self.label.userprofile.addFilmographyWork
                        input.login_input.btn_primary(type='button' id='addFilmographyWork' onclick='addNextFilmographyWork();' value=self.label.userprofile.addFilmographyWork)

            fieldset#saveProfileSet
                legend
                .fieldset_grid
                    .form_group
                        label.person_profile_label(for='saveProfileButton')= " "
                        input.login_input.btn_primary_big.deleteGalleryImage(type='button' id='saveProfileButton' name='saveProfileButton' onclick='validatePersonForm()' value=self.label.userprofile.saveProfile)

        p#loadingStatus= self.label.filters.loading
        p#savingStatus(style= 'display: none')= self.label.filters.saving || 'Workin\' on it...'
        p#logInStatus(style= 'display: none')= self.label.userprofile.logIn

    script(src='https://cdn.jsdelivr.net/npm/sortablejs@1.15.3/Sortable.min.js')
    #translationStrings(style= 'display: none;')
        span.validatioErrorFileIsNotImage= self.label.addPro.validatioErrorFileIsNotImage
        span.validationErrorImageFileIsToBig= self.label.addPro.validationErrorImageFileIsToBig
        span.validatioErrorFileIsNotAudio= self.label.addPro.validatioErrorFileIsNotAudio
        span.validationErrorAudioFileIsToBig= self.label.addPro.validationErrorAudioFileIsToBig
        span.validationErrorRequiredField= self.label.addPro.validationErrorRequiredField
        span.validationErrorEmployeesCount= self.label.addPro.validationErrorEmployeesCount
        span.validationErrorInvalidImageYear= self.label.addPro.validationErrorInvalidImageYear
        span.validationErrorEmail= self.label.addPro.validationErrorEmail
        span.validationErrorPhone= self.label.addPro.validationErrorPhone
        span.validationErrorShowreel= self.label.addPro.validationErrorShowreel
