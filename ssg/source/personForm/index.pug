extends /_templates/layout.pug
include /_templates/mixins.pug

block content
    section.userprofile
        form.form#thisPersonProfile(style= 'display: none')

            div.form_group
                label.person_profile_label(for='firstName')= self.label.userprofile.firstName
                input.login_input#firstName.form-control( type='text', placeholder=`${self.label.userprofile.firstName}` name='firstName' autocomplete="off" oninput="validateFirstName(this.id)")
                div#firstNameHelp(class='valid')= self.label.userprofile.firstNameHelp
            div.form_group
                label.person_profile_label(for='lastName')= self.label.userprofile.lastName
                input.login_input#lastName.form-control( type='text', placeholder=`${self.label.userprofile.lastName}` name='lastName' autocomplete="off" oninput="validateLastName(this.id)")
                div#lastNameHelp(class='valid')= self.label.userprofile.lastNameHelp
            div.form_group
                label.person_profile_label(for='gender')= self.label.userprofile.gender
                select.login_input#gender(name='gender' oninput='validateGender(this.id)')
                    each gender in self.data.genders.sort((a, b) => a.id - b.id)
                        option.login_input(value=gender.id)= gender[self.locale]
                    option.login_input(class='invalid' value="" selected="")= self.label.userprofile.select
                div#genderHelp(class='valid')= self.label.userprofile.genderHelp
            div.form_group
                label.person_profile_label(for='phoneNr')= self.label.userprofile.phone
                input.login_input#phoneNr.form-control( type='text' placeholder=`${self.label.userprofile.phone}` name='phoneNr' autocomplete="off")
            div.form_group
                label.person_profile_label(for='eMail')= self.label.userprofile.email
                input.login_input#eMail.form-control( type='email' placeholder=`${self.label.userprofile.email}` name='eMail' autocomplete="off")
            div.form_group
                label.person_profile_label(for='proRole')= self.label.userprofile.proRole
                select.login_input#proRole(name='proRole')
                    each roleatfilm in self.data.roleatfilms.sort((a, b) => a.id - b.id)
                        option.login_input(value=roleatfilm.id)= roleatfilm.roleName[self.locale]
                    option.login_input(class='invalid' value="" selected="")= self.label.userprofile.select
                //- div#genderHelp(class='valid')= self.label.userprofile.genderHelp

            fieldset
                legend
                    div.form_group
                        img#imgPreview(alt="user profile pic", src="/assets/img/static/Hunt_Kriimsilm_2708d753de.jpg")
                        label.login_label(for='profileImg')= self.label.userprofile.profileImg
                        div#imgError
                        input.input_file#profileImg(type='file' name='filename' accept='image/png, image/jpeg, image/jpg' onchange ='validateImageAndPreview(this.files[0])')
                    div.form_group
                        label.person_profile_label(for='photographer')= self.label.userprofile.photographer
                        input.login_input#photographer.form-control(type='text' name='photographer' autocomplete="off")
                    div.form_group
                        label.person_profile_label(for='img_year')= self.label.userprofile.imageYear
                        input.login_input#img_year.form-control(type='number' name='img_year' min='1900' max='3000' autocomplete="off")

            fieldset
                legend
                    div.form_group
                        label.person_profile_label(for='gallery_img')= self.label.userprofile.profileImg
                        input.login_input#profile_img(type='file' name='gallery_img' accept='image/png, image/jpeg, image/jpg')
                    div.form_group
                        label.person_profile_label(for='photographer2')= self.label.userprofile.photographer
                        input.login_input#photographer2.form-control(type='text' name='photographer2' autocomplete="off")
                    div.form_group
                        label.person_profile_label(for='img_year2')= self.label.userprofile.imageYear
                        input.login_input#img_year2.form-control(type='number' name='img_year2' min='1900' max='3000' autocomplete="off")

                    button.btn.btn_primary(id='addNextGalleryImg')= self.label.userprofile.addNextGalleryImg

            fieldset
                legend
                    div.form_group
                        label.person_profile_label(for='addrCountry')= self.label.userprofile.country
                        select.login_input#addrCountry(name='addrCountry')
                            each country in self.data.countries.sort((a, b) => a.id - b.id)
                                option.login_input(value=country.id)= country[`name_${self.locale}`]
                            option.login_input(class='invalid' value="" selected="")= self.label.userprofile.select
                    div.form_group
                        label.person_profile_label(for='addrCounty')= self.label.userprofile.county
                        select.login_input#addrCounty(name='addrCounty')
                            each county in self.data.counties.sort((a, b) => a.id - b.id)
                                option.login_input(value=county.id)= county[`name_${self.locale}`]
                            option.login_input(class='invalid' value="" selected="")= self.label.userprofile.select
                    div.form_group
                        label.person_profile_label(for='addrPplace')= self.label.userprofile.populatedPlace
                        select.login_input#addrPplace(name='addrPplace')
                            each populatedplace in self.data.populatedplaces.sort((a, b) => a.id - b.id)
                                option.login_input(value=populatedplace.id)= populatedplace[`name_${self.locale}`]
                            option.login_input(class='invalid' value="" selected="")= self.label.userprofile.select
                    div.form_group
                        label.person_profile_label(for='street_name')= self.label.userprofile.streetName
                        input.login_input#street_name.form-control(type='text' placeholder=`${self.label.userprofile.streetName}` name='street_name')

            //- fieldset
            //-     legend
            //-         div.form_group
            //-             label.person_profile_label(for='street_name')= self.label.userprofile.streetName
            //-             input.login_input#street_name.form-control(type='text' placeholder=`${self.label.userprofile.streetName}` name='street_name')




            button.btn.btn_primary(id='saveProfileButton' onclick='validatePersonForm()')= self.label.userprofile.saveProfile
            //-self.label.userprofile.saveButton
            p#personProfileSent(style= {display: 'none'})= self.label.userprofile.profileSaved
            //- self.label.userprofile.dataSaved
        p#loadingStatus LAADIMINE...
        p#logInStatus(style= 'display: none') LOGI SISSE

    style.
        .invalid {background-color: transparent; display: block; color: #495057}
        .valid {background-color: #ccf1e7; display: none}
        .invalidColor {background-color: #fff3e8}
        .c_invalid {background-color: #fff3e8}
        .c_valid {background-color: transparent}
        h4 {color: #464646}
        h1 {color: #495057}
        #personProfileSent {color: #495057}
        label {color: #495057}
        #imgError {color: red}

        #removeProviderWarning{
            display: flex;
            flex-direction: column;
        }
        a.btn.btn-primary {
            background-color: #ccf1e7;
            color: #495057
        }
        form.imput-form.input.login_input.form-control{
            background-color: #ffffff;
        }

