extends /_templates/layout.pug
include /_templates/mixins.pug
block content
    section.addProType
        .titleSmall= self.label.addPro.mainInfoTitle1
        .titleLarge= self.label.addPro.mainInfoTitle2
        .addProDescription= self.label.addPro.mainInfoDescription1
        .addProDescription= self.label.addPro.mainInfoDescription2

        strong
            label= self.label.addPro.chooseProfileTypeLabel
        select(name='addProType' onchange='showSection(this.value)' autocomplete="off")
            option(value="" selected="" disabled)= self.label.addPro.chooseProfileTypeSelectValue
            - var profileTypes = {personprofile: self.label.addPro.typeCreativePerson, organisationprofile: self.label.addPro.typeOrganisation}
            each label, key in profileTypes
                option(value=key)= label
        span.result

    section.addProSection.organisationprofile.disabled
        .popup-overlay#infoPopup
            dialog.popup
                p= self.label.addPro.messageOrganisationSaveSuccess
                button.send_data(onclick='location.reload()')= "OK"

        .publishingInfo
            p.right_to_publish_label= self.label.addPro.rightToPublisUntil
                span.right_to_publish_date
            p.no_right_to_publish_label !{self.label.addPro.errorNoRightToPublish}

        form(autocomplete="off")
            //- organisation name
            fieldset.opened.organisation
                legend= self.label.addPro.nameTitle
                .fieldset_grid
                    .form_group
                        label= self.label.addPro.nameDescription
                            span.required= ' ' + self.label.addPro.required
                            input( type='text' name='name_en' required maxlength="200" oninput="validateField(event.currentTarget)" data-validate="required")
                            .error

            //- Person name, lastname
            fieldset.opened.person
                legend= self.label.addPro.nameTitle
                .fieldset_grid.three_columns_uneven
                    .form_group
                        label= self.label.addPro.firstName
                            span.required= ' ' + self.label.addPro.required
                            input( type='text' name='firstName' required maxlength="200" oninput="validateField(event.currentTarget)" data-validate="required")
                            .error
                    .form_group
                        label= self.label.addPro.lastName
                            span.required= ' ' + self.label.addPro.required
                            input( type='text' name='lastName' required maxlength="200" oninput="validateField(event.currentTarget)" data-validate="required")
                            .error

            //- Role at films
            fieldset.opened.organisation.person
                legend= self.label.addPro.roleTitle
                .fieldset_grid.one_column
                    .form_group.orderedRaF
                        label(for='orderedRaF')= self.label.addPro.roleDescription
                            span.required= ' ' + self.label.addPro.required
                        .sub_form(draggable="true")
                            span.nr= "1."
                            span.drag_me
                                <svg width="18" height="37" viewBox="0 0 18 37" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M5.18182 11.4444C5.76047 11.4444 6.31543 11.2103 6.7246 10.7936C7.13377 10.3768 7.36364 9.81159 7.36364 9.22222C7.36364 8.63285 7.13377 8.06762 6.7246 7.65087C6.31543 7.23413 5.76047 7 5.18182 7C4.60316 7 4.04821 7.23413 3.63904 7.65087C3.22987 8.06762 3 8.63285 3 9.22222C3 9.81159 3.22987 10.3768 3.63904 10.7936C4.04821 11.2103 4.60316 11.4444 5.18182 11.4444ZM5.18182 19.2222C5.76047 19.2222 6.31543 18.9881 6.7246 18.5713C7.13377 18.1546 7.36364 17.5894 7.36364 17C7.36364 16.4106 7.13377 15.8454 6.7246 15.4287C6.31543 15.0119 5.76047 14.7778 5.18182 14.7778C4.60316 14.7778 4.04821 15.0119 3.63904 15.4287C3.22987 15.8454 3 16.4106 3 17C3 17.5894 3.22987 18.1546 3.63904 18.5713C4.04821 18.9881 4.60316 19.2222 5.18182 19.2222ZM7.36364 24.7778C7.36364 25.3671 7.13377 25.9324 6.7246 26.3491C6.31543 26.7659 5.76047 27 5.18182 27C4.60316 27 4.04821 26.7659 3.63904 26.3491C3.22987 25.9324 3 25.3671 3 24.7778C3 24.1884 3.22987 23.6232 3.63904 23.2064C4.04821 22.7897 4.60316 22.5556 5.18182 22.5556C5.76047 22.5556 6.31543 22.7897 6.7246 23.2064C7.13377 23.6232 7.36364 24.1884 7.36364 24.7778ZM12.8182 11.4444C13.3968 11.4444 13.9518 11.2103 14.361 10.7936C14.7701 10.3768 15 9.81159 15 9.22222C15 8.63285 14.7701 8.06762 14.361 7.65087C13.9518 7.23413 13.3968 7 12.8182 7C12.2395 7 11.6846 7.23413 11.2754 7.65087C10.8662 8.06762 10.6364 8.63285 10.6364 9.22222C10.6364 9.81159 10.8662 10.3768 11.2754 10.7936C11.6846 11.2103 12.2395 11.4444 12.8182 11.4444ZM15 17C15 17.5894 14.7701 18.1546 14.361 18.5713C13.9518 18.9881 13.3968 19.2222 12.8182 19.2222C12.2395 19.2222 11.6846 18.9881 11.2754 18.5713C10.8662 18.1546 10.6364 17.5894 10.6364 17C10.6364 16.4106 10.8662 15.8454 11.2754 15.4287C11.6846 15.0119 12.2395 14.7778 12.8182 14.7778C13.3968 14.7778 13.9518 15.0119 14.361 15.4287C14.7701 15.8454 15 16.4106 15 17ZM12.8182 27C13.3968 27 13.9518 26.7659 14.361 26.3491C14.7701 25.9324 15 25.3671 15 24.7778C15 24.1884 14.7701 23.6232 14.361 23.2064C13.9518 22.7897 13.3968 22.5556 12.8182 22.5556C12.2395 22.5556 11.6846 22.7897 11.2754 23.2064C10.8662 23.6232 10.6364 24.1884 10.6364 24.7778C10.6364 25.3671 10.8662 25.9324 11.2754 26.3491C11.6846 26.7659 12.2395 27 12.8182 27Z" fill="#636769"/>
                                </svg>
                            select(name='orderedRaF' oninput="orderedRaFChanged(event.currentTarget)" data-validate="at-least-one-option-selected")
                                option.default_select(class='invalid' value="" selected="")
                                each roleatfilm in self.data.roleatfilms.sort((a, b) => a.roleName[self.locale].localeCompare(b.roleName[self.locale]))
                                    option(value=roleatfilm.id)= roleatfilm.roleName[self.locale]
                            button.remove_fields(type='button' onclick='removeFields(event)')= self.label.addPro.buttonRemove
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.roleButtonAdd
                        .error

            //- Team size
            fieldset.organisation
                legend= self.label.addPro.teamSizeTitle
                label= self.label.addPro.teamSizeDescription
                .fieldset_grid
                    .form_group
                        .sub_form
                            input.number_field(type='text' name='employees_n' oninput="validateField(event.currentTarget)" data-validate="is-number-between-1-10000")
                            button.remove_fields(type='button' onclick='removeFields(event)')= self.label.addPro.buttonRemove
                            .error
                .fieldset_grid.one_column
                    .form_group
                        label= self.label.addPro.teamMemberLabel
                        .sub_form
                            select(name='creative_gate_relations')
                                option(value="" selected="" disabled)= ''
                                - var filteredPersons = self.data.person.filter(person => Array.isArray(person.festival_editions) && person.festival_editions.some(festival => festival.id === 59))
                                - var sortedPersons = filteredPersons.sort(((a, b) => a.firstNameLastName.localeCompare(b.firstNameLastName)))
                                each person in sortedPersons
                                    option(value=person.id)= person.firstNameLastName
                            button.remove_fields(type='button' onclick='removeFields(event)')= self.label.addPro.buttonRemove
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.teamMemberButtonAdd
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.teamSizeButtonAdd

            //- Hourly rate
            fieldset.organisation.person
                legend= self.label.addPro.hourlyRateTitle
                label= self.label.addPro.hourlyRateDescription
                .fieldset_grid.one_column
                    .form_group
                        input.number_field(type='number' name='h_rate_from')
                        span.rate_gap= "-"
                        input.number_field(type='number' name='h_rate_to' placeholder='â‚¬')
                        button.hide_fieldset_fields(type='button')= self.label.addPro.buttonRemove
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.hourlyRateButtonAdd

            //-gender
            fieldset.opened.person
                legend= self.label.addPro.genderTitle
                .fieldset_grid.three_columns_uneven
                    .form_group
                        label= self.label.addPro.genderDescription
                            span.required= ' ' + self.label.addPro.required
                            select(name='gender' oninput="validateField(event.currentTarget)"  data-validate="required")
                                option.placeholder(class='notinvalid' value="" selected="")
                                each gender in self.data.genders.sort((a, b) => a[self.locale].localeCompare(b[self.locale]))
                                    option.login_input(value=gender.id)= gender[self.locale]
                        .error

            //- Languages person
            fieldset.opened.person
                legend= self.label.addPro.languagesTitle
                .fieldset_grid.three_columns_uneven
                    .form_group
                        label= self.label.addPro.nativeLanguage
                            span.required= ' ' + self.label.addPro.required
                            select(name='native_lang' oninput="validateField(event.currentTarget)"  data-validate="required")
                                option.placeholder(class='notinvalid' value="" selected="")
                                each language in self.data.languages.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=language.id)= language[`name_${self.locale}`]
                        .error
                .fieldset_grid.one_column
                    .form_group
                        label= self.label.addPro.spokenLangugagesTitle
                            span.required= ' ' + self.label.addPro.required
                        .sub_form
                            select(name='other_lang' oninput="validateField(event.currentTarget)" data-validate="at-least-one-option-selected")
                                option.placeholder(class='notinvalid' value="" selected="")
                                each language in self.data.languages.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=language.id)= language[`name_${self.locale}`]
                            button.remove_fields(type='button' onclick='removeFields(event)')= self.label.addPro.buttonRemove
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.spokenLangugageButtonAdd
                        .error

            //- Spoken languages organisation
            fieldset.opened.organisation
                legend= self.label.addPro.spokenLangugagesTitle
                .fieldset_grid.one_column
                    .form_group
                        label= self.label.addPro.spokenLangugesDescription
                            span.required= ' ' + self.label.addPro.required
                        .sub_form
                            select(name='languages' oninput="validateField(event.currentTarget)" data-validate="at-least-one-option-selected")
                                option.placeholder(class='notinvalid' value="" selected="")
                                each language in self.data.languages.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=language.id)= language[`name_${self.locale}`]
                            button.remove_fields(type='button' onclick='removeFields(event)')= self.label.addPro.buttonRemove
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.spokenLangugageButtonAdd
                        .error

            //- Profile image / Logo
            fieldset.opened.organisation.person
                legend= self.label.addPro.profileImageTitle
                label= self.label.addPro.profileImageDescription
                .fieldset_grid.two_columns_profile_image
                    .form_group
                        img.imgPreview.square(alt="user profile pic", src="/assets/img/static/profile_img_1_1.svg" data-placeholder-img='/assets/img/static/profile_img_1_1.svg')
                        .error
                        input.input_file(type='file' name='logoColour' accept='image/*' onchange ='previewImage(event)')
                    .form_group.image_metadata
                        label
                            span= self.label.addPro.imageCaption
                            input(type='text' name='caption')
                        label
                            span= self.label.addPro.imagePhotographer
                            input(type='text' name='photographer')
                        label
                            span= self.label.addPro.imageYear
                            input(type='number' name='img_year' min='1900' max='2100' oninput="validateField(event.currentTarget)" data-validate="is-valid-year")
                            .error
                        button.remove_fields(type='button' onclick='clearFields(event)')= self.label.addPro.buttonRemove

            //- Header image / Logo
            fieldset.organisation
                legend= self.label.addPro.headerImageTitle
                label= self.label.addPro.headerImageDescription
                .fieldset_grid.two_columns_image
                    .form_group
                        img.imgPreview(alt="user profile pic", src="/assets/img/static/gallery_img_org.svg" data-placeholder-img="/assets/img/static/gallery_img_org.svg")
                        .error
                        input.input_file(type='file' name='profile_img' accept='image/*' onchange ='previewImage(event)')
                    .form_group.image_metadata
                        label
                            span= self.label.addPro.imageCaption
                            input(type='text' name='caption')
                        label
                            span= self.label.addPro.imagePhotographer
                            input(type='text' name='photographer')
                        label
                            span= self.label.addPro.imageYear
                            input(type='number' name='img_year' min='1900' max='2100' oninput="validateField(event.currentTarget)" data-validate="is-valid-year")
                            .error
                        button.remove_fields(type='button' onclick='clearFields(event)' data-close-fieldset="true")= self.label.addPro.buttonRemove

                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.headerImageButtonAdd

            //- person actor info
            fieldset.person.opened.hide_actor#actor_fieldset
                legend= self.label.addPro.ActorSetTitle
                .fieldset_grid
                    .form_group
                        label.acting_age
                            span= self.label.addPro.actingAge
                            input(type='text' class="age_field" name='acting_age_from' oninput="validateField(event.currentTarget)" data-validate="is-number-0-to-100")
                            span.rate_gap= "-"
                            input(type='text' class="age_field" name='acting_age_to' oninput="validateField(event.currentTarget)" data-validate="is-number-0-to-100")
                            .error
                .fieldset_grid
                    .form_group
                        label= self.label.addPro.stature
                            select(name='stature')
                                option.login_input(class='invalid' value="" selected="")
                                each stature in self.data.statures.sort((a, b) => a[`name_${self.locale}`].localeCompare(b[`name_${self.locale}`]))
                                    option.login_input(value=stature.id)= stature[`name_${self.locale}`]
                    .form_group
                        label= self.label.addPro.height
                            input(type='text' name='height_cm' oninput="validateField(event.currentTarget)" data-validate="is-number-0-to-500")
                            .error
                    .form_group
                        label= self.label.addPro.weight
                            input(type='text' name='weight_kg' oninput="validateField(event.currentTarget)" data-validate="is-number-0-to-500")
                            .error
                    .form_group
                        label= self.label.addPro.eyeColour
                            select(name='eye_colour')
                                option.login_input(class='invalid' value="" selected="")
                                each eyecolour in self.data.eyecolours.sort((a, b) => a[`name_${self.locale}`].localeCompare(b[`name_${self.locale}`]))
                                    option.login_input(value=eyecolour.id)= eyecolour[`name_${self.locale}`]
                    .form_group
                        label= self.label.addPro.hairColour
                            select(name='hair_colour')
                                option.login_input(class='invalid' value="" selected="")
                                each haircolour in self.data.haircolours.sort((a, b) => a[`name_${self.locale}`].localeCompare(b[`name_${self.locale}`]))
                                    option.login_input(value=haircolour.id)= haircolour[`name_${self.locale}`]
                    .form_group
                        label= self.label.addPro.hairLength
                            select(name='hair_length')
                                option.login_input(class='invalid' value="" selected="")
                                each hairlength in self.data.hairlengths.sort((a, b) =>a[`name_${self.locale}`].localeCompare(b[`name_${self.locale}`]))
                                    option.login_input(value=hairlength.id)= hairlength[`name_${self.locale}`]
                    .form_group
                        label= self.label.addPro.pitchOfVoice
                            select(name='pitch_of_voice')
                                option.login_input(class='invalid' value="" selected="")
                                each pitchofvoice in self.data.pitchofvoices.sort((a, b) => a[`name_${self.locale}`].localeCompare(b[`name_${self.locale}`]))
                                    option.login_input(value=pitchofvoice.id)= pitchofvoice[`name_${self.locale}`]

            //- Give us some insights who you are
            fieldset.opened.organisation.person
                legend= self.label.addPro.insightsTitle
                .fieldset_grid.two_columns_even
                    .form_group.textarea
                        label
                            span= self.label.addPro.insightsFieldDescriptionTitle
                                span.required= ' ' + self.label.addPro.required
                            textarea(name="description_en" oninput="validateField(event.currentTarget)" data-validate="required")
                            .count
                                span.current_count= 0
                                span= "/"
                                span.maximum_count= 500
                            .error
                    .form_group.textarea
                        label
                            span= self.label.addPro.insightsFieldSkillsTitle
                            textarea(name="skills_en")
                            .count
                                span.current_count= 0
                                span= "/"
                                span.maximum_count= 500

            //- Looking for
            fieldset.organisation.person
                legend= self.label.addPro.lookingForTitle
                label= self.label.addPro.lookingForDescription
                .fieldset_grid.one_column
                    .form_group
                        .sub_form(data-close-fieldset="true")
                            select(name='tag_looking_fors')
                                option.default_select(class='invalid' value="" selected="")
                                    //- = self.label.userprofile.proRole
                                each lookingFor in self.data.taglookingfors.sort((a, b) => a.en.localeCompare(b.en))
                                    option(value=lookingFor.id)= lookingFor.en
                            button.remove_fields(type='button' onclick='removeFields(event)')= self.label.addPro.buttonRemove
                        button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.lookingForButtonAdd
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.lookingForButtonAdd

            //- Professional links
            fieldset.organisation.person
                legend= self.label.addPro.professionalLinksTitle
                .fieldset_grid
                    .form_group
                        label= self.label.addPro.professionalLinksWebpage
                            input(type='url' name='webpage_url')
                    .form_group
                        label= self.label.addPro.professionalLinksYoutube
                            input(type='url' name='acc_youtube')
                    .form_group
                        label= self.label.addPro.professionalLinksVimeo
                            input(type='url' name='acc_vimeo')
                    .form_group
                        label= self.label.addPro.professionalLinksIMDB
                            input(type='url' name='acc_imdb')
                    .form_group
                        label= self.label.addPro.professionalLinksEFIS
                            input(type='url' name='acc_efis')
                    .form_group.castupload
                        label= self.label.addPro.professionalLinksCastupload
                            input(type='url' name='acc_castupload')
                    .form_group
                        label= self.label.addPro.professionalLinksInstagram
                            input(type='url' name='acc_instagram')
                    .form_group
                        label= self.label.addPro.professionalLinksFacebook
                            input(type='url' name='acc_fb')
                    .form_group.e_talenta
                        label= self.label.addPro.professionalLinksETalenta
                            input(type='url' name='acc_etalenta')
                    .form_group
                        label= self.label.addPro.professionalLinksOther
                            input(type='url' name='acc_other')
                .fieldset_grid
                    .form_group
                        button.hide_fieldset_fields(type='button')= self.label.addPro.buttonRemove
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.professionalLinksButtonAdd

            //- Public contact info
            fieldset.opened.organisation.person
                legend= self.label.addPro.publicContantInfoTitle
                .fieldset_grid
                    .form_group
                        label= self.label.addPro.publicContactInfoEmail
                            span.required= ' ' + self.label.addPro.required
                            input(type="text" name="eMail" oninput="validateField(event.currentTarget)" data-validate="is-email")
                        .error
                    .form_group
                        label= self.label.addPro.publicContantInfoPhone
                            input(type="text" name="phoneNr" oninput="validateField(event.currentTarget)" data-validate="is-phone-nr")
                        .error

            //- Contact address
            fieldset.opened.addr_coll.organisation.person
                legend= self.label.addPro.contactAddressTitle
                .div
                .fieldset_grid
                    .form_group
                        label= self.label.addPro.contactAddressCountry
                            span.required= ' ' + self.label.addPro.required
                            select(name='country' data-validate="at-least-one-option-selected")
                                option(class='invalid' value="" selected="")
                                each country in self.data.countries.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=country.id)= country[`name_${self.locale}`]
                            .error
                    .form_group
                        label= self.label.addPro.contactAddressCounty
                            span.required(style= 'display: none;')= ' ' + self.label.addPro.required
                            select(name='county' style= 'display: none;')
                                option(class='invalid' value="" selected="")
                                each county in self.data.counties.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=county.id)= county[`name_${self.locale}`]
                            .error
                            input(type="text" name="add_county")

                    .form_group
                        label= self.label.addPro.contactAddressMunicipality
                            select(name='municipality' style= 'display: none;')
                                option(class='invalid' value="" selected="")
                                each municipality in self.data.municipalities.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                    option(value=municipality.id)= municipality[`name_${self.locale}`]
                            input(type="text" name="add_municipality")

                    .form_group
                        label= self.label.addPro.contactAddressPopulatedPlace
                            input( type='text' name='populated_place')
                    .form_group
                        label= self.label.addPro.contactAddressStreetName
                            input( type='text' name='street_name')
                    .form_group
                        label= self.label.addPro.contactAddressAddressNumber
                            input( type='text' name='address_number')
                    .form_group
                        label= self.label.addPro.contactAddressApartmentNumber
                            input( type='text' name='appartment')
                    .form_group
                        label= self.label.addPro.contactAddressPostalCode
                            input( type='text' name='postal_code')
                            input( type='hidden', name="id")

            //- Education
            fieldset.person
                legend= self.label.addPro.educationTitle
                    div= self.label.addPro.educationDescription
                .educations
                    .list
                    .education_row_template(style='display: none;')
                        .filmography.collection_entry
                            .summary
                                button(type="button" class="toggle_summary")
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">'+
                                        <path d="M6 9L12 15L18 9" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>' +
                                    </svg>
                                    strong
                                        span.nr= '%nr%.'
                                        = '%org_name%' + '%years%'
                            .filled_filmography
                    button.add_next_work(type='button' onclick='showFilmographyFields(event)')= self.label.addPro.educationAddNext
                .filmography_form.template(style= 'display: none;')
                    .fieldset_grid.three_columns_uneven
                        .form_group
                            label.year_label= self.label.addPro.educationFromyear
                                input.year_field( type='number' name='year_from' min='1900' max='2100' oninput="validateField(event.currentTarget)" data-validate="is-valid-year")
                                .error
                            label.year_label.year_of_completion= self.label.addPro.educationToyear
                                input.year_field( type='number' name='year_to' min='1900' max='2100' oninput="validateField(event.currentTarget)" data-validate="is-valid-year")
                                .error
                    .fieldset_grid.three_columns_uneven
                        .form_group
                            label.long_text= self.label.addPro.educationOrganisation
                                span.required= ' ' + self.label.addPro.required
                                input( type='text' name='org_name'  oninput="validateField(event.currentTarget)" data-validate="required")
                                .error
                        .form_group
                            label= self.label.addPro.educationDepartment
                                input( type='text' name='org_department')
                        .form_group
                            label= self.label.addPro.educationDegree
                                input(type='text' name='degree')

                    .fieldset_grid.three_columns_uneven
                        .form_group
                            label= self.label.addPro.educationOrganisationWebpage
                                input( type='url' name='org_url')


                    .fieldset_grid.two_columns_even.component_buttons
                        input(type="hidden" name="id")

                        button.send_data(type='button' onclick='saveFilmography(event, "education")')= self.label.addPro.buttonSubmit
                            span
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_3410_46764)">
                                    <path d="M22 11.0799V11.9999C21.9988 14.1563 21.3005 16.2545 20.0093 17.9817C18.7182 19.7088 16.9033 20.9723 14.8354 21.5838C12.7674 22.1952 10.5573 22.1218 8.53447 21.3744C6.51168 20.6271 4.78465 19.246 3.61096 17.4369C2.43727 15.6279 1.87979 13.4879 2.02168 11.3362C2.16356 9.18443 2.99721 7.13619 4.39828 5.49694C5.79935 3.85768 7.69279 2.71525 9.79619 2.24001C11.8996 1.76477 14.1003 1.9822 16.07 2.85986" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M22 4L12 14.01L9 11.01" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_3410_46764">
                                    <rect width="24" height="24" fill="white"/>
                                    </clipPath>
                                    </defs>
                                </svg>

                        button.remove_collection(type='button' onclick='removeFilmography(event)')= self.label.addPro.buttonRemove
                            span
                                <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_1333_33497)">
                                    <path d="M12.5 22C18.0228 22 22.5 17.5228 22.5 12C22.5 6.47715 18.0228 2 12.5 2C6.97715 2 2.5 6.47715 2.5 12C2.5 17.5228 6.97715 22 12.5 22Z" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M15.5 9L9.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M9.5 9L15.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_1333_33497">
                                    <rect width="24" height="24" fill="white" transform="translate(0.5)"/>
                                    </clipPath>
                                    </defs>
                                </svg>
                .fieldset_grid.buttons
                    button.show_filmography_fields(type='button' onclick='showFilmographyFields(event)')= self.label.addPro.educationButtonAdd

            //- Filmography
            fieldset.organisation.person
                legend= self.label.addPro.filmographyTitle
                    div= self.label.addPro.filmographyDescription1
                    div= self.label.addPro.filmographyDescription2
                .filmographies
                    .list
                    .filmography_row_template(style='display: none;')
                        .filmography.collection_entry
                            .summary
                                button(type="button" class="toggle_summary")
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">'+
                                        <path d="M6 9L12 15L18 9" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>' +
                                    </svg>
                                    strong
                                        span.nr= '%nr%.'
                                        = '%work_name%'
                                    span.role_at_film= ', as a %role_at_film%'
                                span.is_featured_project
                                    span= "Featured project"
                                    .switch
                                        input(type="checkbox" name="is_featured")
                                        span.slider
                                            span.round
                            .filled_filmography

                    button.add_next_work(type='button'  onclick='showFilmographyFields(event)')= self.label.addPro.filmographyButtonAddNextWork
                .filmography_form.template.fields(style= 'display: none;')
                    .fieldset_grid.two_columns_uneven
                        .form_group
                            label= self.label.addPro.filmographyTypeOfWork
                                span.required= ' ' + self.label.addPro.required
                            - var sortedTypeOfWorks = self.data.typeofworks.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                            - var filteredTypeOfWorks = sortedTypeOfWorks.filter(t => t[`name_${self.locale}`] != 'Education')
                            select(name='type_of_work' oninput="validateField(event.currentTarget)" data-validate="at-least-one-option-selected")
                                option.default_select(class='invalid' value="" selected="")
                                each typeofwork in filteredTypeOfWorks
                                    option(value=typeofwork.id)= typeofwork[`name_${self.locale}`]
                            .error
                        .form_group
                            label= self.label.addPro.filmographyProfession
                                span.required= ' ' + self.label.addPro.required
                            .sub_form
                                select.reduced(name='role_at_films' oninput="validateField(event.currentTarget)"  data-validate="at-least-one-option-selected")
                                    option.default_select(class='invalid' value="" selected="")
                                    each roleatfilm in self.data.roleatfilms.sort((a, b) => a.roleName[self.locale].localeCompare(b.roleName[self.locale]))
                                        option(value=roleatfilm.id)= roleatfilm.roleName[self.locale]
                                button.remove_fields(type='button' onclick='removeFields(event)')= self.label.addPro.buttonRemove
                            button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.filmographyProfessionButtonAdd
                            .error
                    .fieldset_grid.three_columns_uneven
                        .form_group
                            label.year_label= self.label.addPro.filmographyFromYear
                                input.year_field#org_appartment( type='number' name='year_from' min='1900' max='2100' oninput="validateField(event.currentTarget)" data-validate="is-valid-year")
                                .error
                            label.year_label.year_of_completion= self.label.addPro.filmographyYearOfCompletion
                                input.year_field( type='number' name='year_to' min='1900' max='2100' oninput="validateField(event.currentTarget)" data-validate="is-valid-year")
                                .error
                    .fieldset_grid.three_columns_uneven
                        .form_group
                            label= self.label.addPro.filmographyNameOfWork
                                span.required= ' ' + self.label.addPro.required
                                input( type='text' name='work_name'  oninput="validateField(event.currentTarget)" data-validate="required")
                                .error
                        .form_group
                            label= self.label.addPro.filmographyWorkWebpage
                                input( type='text' name='work_url')
                        .form_group
                            label= self.label.addPro.filmographyRunningTime
                                input(type='number' name='runtime'   oninput="validateField(event.currentTarget)" data-validate='is-number-between-1-10000')
                                .error
                    .fieldset_grid.three_columns_uneven
                        .form_group
                            label= self.label.addPro.filmographyProductionCompany
                                input( type='text' name='org_name')
                        .form_group
                            label= self.label.addPro.filmographyProductionCompanyWebpage
                                input( type='text' name='org_url')
                    .fieldset_grid.one_column
                        .form_group.textarea
                            label= self.label.addPro.filmographyYourExperience
                                textarea(name='decsription_en')
                                .count
                                    span.current_count= 0
                                    span= "/"
                                    span.maximum_count= 200
                    .fieldset_grid.two_columns_even
                        .form_group
                            label= self.label.addPro.filmographyIsFeaturedProject
                                .switch
                                    input(type="checkbox" name="is_featured" value="1" onclick='toggleIsFeatured(event)')
                                    span.slider
                                        span.round
                        .form_group
                    .fieldset_grid.two_columns_even.still
                        .form_group(style="position: relative")
                            span.stillLabel= self.label.addPro.filmographyFeaturedProjectAddStill
                            img.imgPreview(alt="gallery picture", src="/assets/img/static/gallery_img_org.svg" data-placeholder-img='/assets/img/static/gallery_img_org.svg')
                            .error
                            input.input_file(type='file' name='stills' accept='image/*' onchange ='previewImage(event)' oninput="validateField(event.currentTarget)" data-validate="still-image")
                        .form_group
                            .field
                                button.remove_still(type='button' onclick="removeStill(event)")= self.label.addPro.buttonRemove

                    .fieldset_grid.two_columns_even.component_buttons
                        input(type="hidden" name="id" value="")

                        button.send_data(type='button' onclick='saveFilmography(event, "completed")')= self.label.addPro.buttonSubmit
                            span
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_3410_46764)">
                                    <path d="M22 11.0799V11.9999C21.9988 14.1563 21.3005 16.2545 20.0093 17.9817C18.7182 19.7088 16.9033 20.9723 14.8354 21.5838C12.7674 22.1952 10.5573 22.1218 8.53447 21.3744C6.51168 20.6271 4.78465 19.246 3.61096 17.4369C2.43727 15.6279 1.87979 13.4879 2.02168 11.3362C2.16356 9.18443 2.99721 7.13619 4.39828 5.49694C5.79935 3.85768 7.69279 2.71525 9.79619 2.24001C11.8996 1.76477 14.1003 1.9822 16.07 2.85986" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M22 4L12 14.01L9 11.01" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_3410_46764">
                                    <rect width="24" height="24" fill="white"/>
                                    </clipPath>
                                    </defs>
                                </svg>

                        button.remove_collection(type='button' onclick='removeFilmography(event)')= self.label.addPro.buttonRemove
                            span
                                <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_1333_33497)">
                                    <path d="M12.5 22C18.0228 22 22.5 17.5228 22.5 12C22.5 6.47715 18.0228 2 12.5 2C6.97715 2 2.5 6.47715 2.5 12C2.5 17.5228 6.97715 22 12.5 22Z" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M15.5 9L9.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M9.5 9L15.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_1333_33497">
                                    <rect width="24" height="24" fill="white" transform="translate(0.5)"/>
                                    </clipPath>
                                    </defs>
                                </svg>


                .fieldset_grid.buttons
                    button.show_filmography_fields(type='button' onclick='showFilmographyFields(event)')= self.label.addPro.filmographyButtonAdd

            //- Ongoing projects
            fieldset.organisation.person
                legend= self.label.addPro.ongoingProjectsTitle
                    div= self.label.addPro.ongoingProjectsDescription
                .on_going_projects
                    .list
                    button.add_next_work(type='button' onclick='showFilmographyFields(event)')= self.label.addPro.filmographyButtonAddNextWork
                .filmography_form.template(style= 'display: none;')
                    .fieldset_grid.two_columns_uneven
                        .form_group
                            label= self.label.addPro.filmographyTypeOfWork
                                span.required= ' ' + self.label.addPro.required
                            - var sortedTypeOfWorks = self.data.typeofworks.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                            - var filteredTypeOfWorks = sortedTypeOfWorks.filter(t => t[`name_${self.locale}`] != 'Education')
                            select(name='type_of_work' oninput="validateField(event.currentTarget)" data-validate="at-least-one-option-selected")
                                option.default_select(class='invalid' value="" selected="")
                                each typeofwork in filteredTypeOfWorks
                                    option(value=typeofwork.id)= typeofwork[`name_${self.locale}`]
                            .error
                        .form_group
                            label= self.label.addPro.filmographyProfession
                            .sub_form
                                select.reduced(name='role_at_films')
                                    option.default_select(class='invalid' value="" selected="")
                                    each roleatfilm in self.data.roleatfilms.sort((a, b) => a.roleName[self.locale].localeCompare(b.roleName[self.locale]))
                                        option(value=roleatfilm.id)= roleatfilm.roleName[self.locale]
                                button.remove_fields(type='button' onclick='removeFields(event)')= self.label.addPro.buttonRemove
                            button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.ongoingProjectProfessionButtonAdd
                    .fieldset_grid.three_columns_uneven
                        .form_group
                            label= self.label.addPro.filmographyNameOfWork
                                span.required= ' ' + self.label.addPro.required
                                input( type='text' name='work_name'  oninput="validateField(event.currentTarget)" data-validate="required")
                                .error
                        .form_group
                            label= self.label.addPro.filmographyWorkWebpage
                                input( type='text' name='work_url' autocomplete="off")
                    .fieldset_grid.one_column
                        .form_group
                            label= self.label.addPro.ongoingProjecsStageOfDevelopment
                                span.required= ' ' + self.label.addPro.required
                                .sub_form
                                    select.reduced(name='project_statuses'  oninput="validateField(event.currentTarget)" data-validate="at-least-one-option-selected")
                                        option.default_select(class='invalid' value="" selected="")
                                        each roleatfilm in self.data.projectStatus.sort((a, b) => a.status.localeCompare(b.status))
                                            option(value=roleatfilm.id)= roleatfilm.status
                                    .error

                    .fieldset_grid.one_column
                        .form_group
                            label= self.label.addPro.ongoingProjecsLookingFor
                            .sub_form
                                select.reduced(name='ongoing_tag_looking_fors')
                                    option.default_select(class='invalid' value="" selected="")
                                    each lookingFor in self.data.taglookingfors.sort((a, b) => a.en - b.en)
                                        option(value=lookingFor.id)= lookingFor[self.locale]
                                button.remove_fields(type='button' onclick='removeFields(event)')= self.label.addPro.buttonRemove
                            button.duplicate_fields(type='button' onclick='duplicatePreviousElement(event)')= self.label.addPro.ongoingProjecsButtonAddLookingFor
                    .fieldset_grid.one_column
                        .form_group.textarea
                            label= self.label.addPro.filmographyYourExperience
                                textarea#org_appartment(name='decsription_en' autocomplete="off")
                                .count
                                    span.current_count= 0
                                    span= "/"
                                    span.maximum_count= 200
                    .fieldset_grid.two_columns_even.component_buttons
                        input(type="hidden" name="id")

                        button.send_data(type='button' onclick='saveFilmography(event, "ongoing")')= self.label.addPro.buttonSubmit
                            span
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_3410_46764)">
                                    <path d="M22 11.0799V11.9999C21.9988 14.1563 21.3005 16.2545 20.0093 17.9817C18.7182 19.7088 16.9033 20.9723 14.8354 21.5838C12.7674 22.1952 10.5573 22.1218 8.53447 21.3744C6.51168 20.6271 4.78465 19.246 3.61096 17.4369C2.43727 15.6279 1.87979 13.4879 2.02168 11.3362C2.16356 9.18443 2.99721 7.13619 4.39828 5.49694C5.79935 3.85768 7.69279 2.71525 9.79619 2.24001C11.8996 1.76477 14.1003 1.9822 16.07 2.85986" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M22 4L12 14.01L9 11.01" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_3410_46764">
                                    <rect width="24" height="24" fill="white"/>
                                    </clipPath>
                                    </defs>
                                </svg>

                        button.remove_collection(type='button' onclick='removeFilmography(event)')= self.label.addPro.buttonRemove
                            span
                                <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_1333_33497)">
                                    <path d="M12.5 22C18.0228 22 22.5 17.5228 22.5 12C22.5 6.47715 18.0228 2 12.5 2C6.97715 2 2.5 6.47715 2.5 12C2.5 17.5228 6.97715 22 12.5 22Z" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M15.5 9L9.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M9.5 9L15.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                    </g>
                                    <defs>
                                    <clipPath id="clip0_1333_33497">
                                    <rect width="24" height="24" fill="white" transform="translate(0.5)"/>
                                    </clipPath>
                                    </defs>
                                </svg>
                .fieldset_grid.buttons
                    button.show_filmography_fields(type='button' onclick='showFilmographyFields(event)')= self.label.addPro.ongoingProjectsButtonAdd

            //- Client List
            fieldset.organisation
                legend= self.label.addPro.clientListTitle
                .fieldset_grid.
                label= self.label.addPro.clientListDescription
                .clients
                    .list
                    .client_row_template(style='display: none;')
                        .client.collection_entry
                            .summary
                                button(type="button" class="toggle_summary")
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">'+
                                        <path d="M6 9L12 15L18 9" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>' +
                                    </svg>
                                    strong
                                        span.nr= '%nr%.'
                                        = '%client_name%'
                            .filled_client
                    button.add_next_work(type='button'  onclick='showClientFields(event)')= self.label.addPro.clientListButtonAdd
                .client_form.template.fields(style= 'display: none;')
                    .fieldset_grid
                        .form_group
                            label= self.label.addPro.clientListClientName
                                span.required= ' ' + self.label.addPro.required
                                input(list='name' name="name"  oninput="validateField(event.currentTarget)" data-validate="required")

                                datalist(id='name')
                                    option.default_select(class='invalid' value="" selected="")
                                    - var filteredOrganisations = self.data.organisations.filter(t => t[`name_${self.locale}`])
                                    each organisation in filteredOrganisations.sort(function(a, b){ if(a[`name_${self.locale}`] && b[`name_${self.locale}`]) { return ('' + a[`name_${self.locale}`]).localeCompare(b[`name_${self.locale}`], self.locale); } else { return 0; } })
                                        option(value=organisation[`name_${self.locale}`])
                                .error
                        .form_group
                            label= self.label.addPro.clientListClientURL
                                input(type='url' name='url' autocomplete="off")
                    .fieldset_grid.one_column
                        .form_group.textarea
                            label= self.label.addPro.clientListClientExperience
                                textarea#org_appartment(name='description' autocomplete="off" oninput="updateTextareaCounter(event.target)")
                                .count
                                    span.current_count= 0
                                    span= "/"
                                    span.maximum_count= 200


                    .fieldset_grid.two_columns_even.component_buttons
                            input(type="hidden" name="id")

                            button.send_data(type='button' onclick='saveClient(event)')= self.label.addPro.buttonSubmit
                                span
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <g clip-path="url(#clip0_3410_46764)">
                                        <path d="M22 11.0799V11.9999C21.9988 14.1563 21.3005 16.2545 20.0093 17.9817C18.7182 19.7088 16.9033 20.9723 14.8354 21.5838C12.7674 22.1952 10.5573 22.1218 8.53447 21.3744C6.51168 20.6271 4.78465 19.246 3.61096 17.4369C2.43727 15.6279 1.87979 13.4879 2.02168 11.3362C2.16356 9.18443 2.99721 7.13619 4.39828 5.49694C5.79935 3.85768 7.69279 2.71525 9.79619 2.24001C11.8996 1.76477 14.1003 1.9822 16.07 2.85986" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        <path d="M22 4L12 14.01L9 11.01" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        </g>
                                        <defs>
                                        <clipPath id="clip0_3410_46764">
                                        <rect width="24" height="24" fill="white"/>
                                        </clipPath>
                                        </defs>
                                    </svg>

                            button.remove_collection(type='button' onclick='removeClient(event)')= self.label.addPro.buttonRemove
                                span
                                    <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <g clip-path="url(#clip0_1333_33497)">
                                        <path d="M12.5 22C18.0228 22 22.5 17.5228 22.5 12C22.5 6.47715 18.0228 2 12.5 2C6.97715 2 2.5 6.47715 2.5 12C2.5 17.5228 6.97715 22 12.5 22Z" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                        <path d="M15.5 9L9.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                        <path d="M9.5 9L15.5 15" stroke="#636769" stroke-linecap="round" stroke-linejoin="round"/>
                                        </g>
                                        <defs>
                                        <clipPath id="clip0_1333_33497">
                                        <rect width="24" height="24" fill="white" transform="translate(0.5)"/>
                                        </clipPath>
                                        </defs>
                                    </svg>

                .fieldset_grid.buttons
                    button.show_client_fields(type='button' onclick="showClientFields(event)")= self.label.addPro.clientListButtonAdd

            //- Showreel
            fieldset.organisation.person
                legend= self.label.addPro.showreelTitle
                label= self.label.addPro.showreelDescription
                .fieldset_grid
                    .form_group
                        input#showreel(type='url' name='showreel' oninput="validateField(event.currentTarget)" data-validate="is-showreel")
                        .error
                    .form_group
                        button.hide_fieldset_fields(type='button')= self.label.addPro.buttonRemove
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.showreelButtonAdd

            //- Audioreel
            fieldset.organisation.person
                legend= self.label.addPro.audioreelTitle
                label= self.label.addPro.audioreelDescription
                .fieldset_grid.one_column
                    .form_group
                        input.input_file#audioreel(type='file' name='audioreel' accept="audio/*" onchange ='previewAudioreel(event)')
                        audio(id="audioreel_preview" style= 'display: none;' controls)
                        .error
                        button.hide_fieldset_fields(type='button')= self.label.addPro.buttonRemove
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.audioreelButtonAdd

            //- Image Gallery
            fieldset.organisation.person
                legend= self.label.addPro.imageGalleryTitle
                label= self.label.addPro.imageGalleryDescription
                .sub_form.gallery
                    .fieldset_grid.two_columns_image
                        .form_group
                            img.imgPreview(alt="gallery picture", src="/assets/img/static/gallery_img_org.svg" data-placeholder-img='/assets/img/static/gallery_img_org.svg')
                            div.error
                            input.input_file(type='file' name='images' accept='image/*' onchange ='previewImage(event)')
                        .form_group.gallery_image_fields.image_metadata
                            label
                                span= self.label.addPro.imageCaption
                                input(type='text' name='caption')
                            label
                                span= self.label.addPro.imagePhotographer
                                input(type='text' name='photographer')

                            label
                                span= self.label.addPro.imageYear
                                input(type='number' name='img_year' min='1900' max='2100' oninput="validateField(event.currentTarget)" data-validate="is-valid-year")
                                .error
                                input(type="hidden" name="id")
                            button.remove_fields(type='button' onclick="removeGalleryImage(event)")= self.label.addPro.buttonRemove
                .fieldset_grid.two_columns_even
                    .form_group
                        button.duplicate_gallery_fields#add_new_gallery_image(type='button' onclick="addNewGalleryImage(event)")= self.label.addPro.imageGalleryButtonAddNext
                .fieldset_grid.buttons
                    button.show_form_fields(type='button')= self.label.addPro.imageGalleryButtonAdd

            //- Yout profile page url
            fieldset.opened.organisation.person
                legend= self.label.addPro.profilePageUrlTitle
                .fieldset_grid.two_columns_even
                    .form_group
                        label= self.label.addPro.profilePageUrlDescription
                            input(type='text' name='profile_url' disabled="true")
                fieldset_grid.one_column
                    .form_group
                        label
                            .switch
                                input(type="checkbox" name="show_in_cg_search")
                                span.slider
                                    span.round
                            span.feedback= self.label.addPro.showProfileInSearch

            //- Feedback
            fieldset.opened.organisation.person
                legend= self.label.addPro.feedbackTitle
                label= self.label.addPro.feedbackDescription
                .fieldset_grid.two_columns_even.component_buttons
                    .form_group
                        a.button_send_feedback(href="mailto:ux@poff.ee&subject=Feedback%20from%20Creative%20Gate%20My%20Profile%20form")= self.label.addPro.feedbackButton
                .fieldset_grid.one_column
                    .form_group
                        label
                            .switch
                                input(type="checkbox" name="ok_to_contact")
                                span.slider
                                    span.round
                            span.feedback= self.label.addPro.feedbackCheckbox

            fieldset.opened.organisation.person
                .fieldset_grid.two_columns_even.component_buttons
                    .form_group
                        input.login_input(type='button' id='saveButton' name='saveButton' onclick='saveForm()' value= self.label.userprofile.saveProfile)

    script(src='https://cdn.jsdelivr.net/npm/sortablejs@1.15.3/Sortable.min.js')
    #translationStrings(style= 'display: none;')
        span.validatioErrorFileIsNotImage= self.label.addPro.validatioErrorFileIsNotImage
        span.validationErrorImageFileIsToBig= self.label.addPro.validationErrorImageFileIsToBig
        span.validatioErrorFileIsNotAudio= self.label.addPro.validatioErrorFileIsNotAudio
        span.validationErrorAudioFileIsToBig= self.label.addPro.validationErrorAudioFileIsToBig
        span.validationErrorRequiredField= self.label.addPro.validationErrorRequiredField
        span.validatinErrorInvalidNumberBetween1_10000= self.label.addPro.validatinErrorInvalidNumberBetween1_10000
        span.validationErrorInvalidYear= self.label.addPro.validationErrorInvalidYear
        span.validationErrorEmail= self.label.addPro.validationErrorEmail
        span.validationErrorPhone= self.label.addPro.validationErrorPhone
        span.validationErrorShowreel= self.label.addPro.validationErrorShowreel
        span.messageOrganisationSaveSuccess= self.label.addPro.messageOrganisationSaveSuccess
        span.errorOnOrganisationLoad= self.label.addPro.errorOnOrganisationLoad
        span.messagePersonSaveSuccess= self.label.addPro.messagePersonSaveSuccess
        span.errorOnPersonLoad= self.label.addPro.errorOnPersonLoad
        span.messageClientSaveSuccess= self.label.addPro.messageClientSaveSuccess
        span.messageFilmographySaveSuccess= self.label.addPro.messageFilmographySaveSuccess
        span.messageErrorOnSave= self.label.addPro.messageErrorOnSave
        span.validationErrorMissingStill=self.label.addPro.validationErrorMissingStill
        span.collectionDataChanged= self.label.addPro.collectionDataChanged
        span.validationErrorInvalidNumber_0_to_100= self.label.addPro.validationErrorInvalidNumber_0_to_100
        span.validationErrorInvalidNumber_0_to_500= self.label.addPro.validationErrorInvalidNumber_0_to_500
        span.profileIsRefreshedShortly !{self.label.addPro.profileIsRefreshedShortly}
        span.profileIsRefreshedAfterXMinutes !{self.label.addPro.profileIsRefreshedAfterXMinutes}

    #loader
        <svg xmlns="http://www.w3.org/2000/svg" width=100px height="100px"  viewBox="0 0 200 200">
            <radialGradient id="a2" cx=".66" fx=".66" cy=".3125" fy=".3125" gradientTransform="scale(1.5)">
                <stop offset="0" stop-color="#727272"></stop>
                <stop offset=".3" stop-color="#727272" stop-opacity=".9"></stop>
                <stop offset=".6" stop-color="#727272" stop-opacity=".6"></stop>
                <stop offset=".8" stop-color="#727272" stop-opacity=".3"></stop>
                <stop offset="1" stop-color="#727272" stop-opacity="0"></stop>
            </radialGradient>
            <circle transform-origin="center" fill="none" stroke="url(#a2)" stroke-width="4" stroke-linecap="round" stroke-dasharray="200 1000" stroke-dashoffset="0" cx="100" cy="100" r="70">
                <animateTransform type="rotate" attributeName="transform" calcMode="spline" dur="2" values="360;0" keyTimes="0;1" keySplines="0 0 1 1" repeatCount="indefinite"></animateTransform>
            </circle>
            <circle transform-origin="center" fill="none" opacity=".2" stroke="#727272" stroke-width="4" stroke-linecap="round" cx="100" cy="100" r="70"></circle>
        </svg>

    div#alertSuccess(class='alertMsg alertSuccess')
    div#alertNotice(class='alertMsg alertNotice')
    div#alertError(class='alertMsg alertError')
